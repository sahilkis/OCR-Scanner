/**********************************************************************
 *
 * Copyright (C) 2020 Aware, Inc.
 *
 * $Workfile:  $    $Revision:  $
 * Last Modified: $Date: $ by: $Author:  $
 *
 **********************************************************************/

/* DO NOT EDIT THIS FILE. IT IS AUTO-GENERATED */

#ifndef _AW_SCORING_H_
#define _AW_SCORING_H_

#ifdef __IOS__
# include "aw_types.h"
#else
# include "awlib/aw_types.h"
#endif

#if defined(_WIN32)
# include <windows.h>
# ifndef AW_SCORING_DECLARE
#   if !defined(AW_SCORING_STATIC_LIBRARY)
#     define AW_SCORING_DECLARE(rtn) __declspec(dllimport) rtn WINAPI
#   else 
#     define AW_SCORING_DECLARE(rtn) rtn
#   endif 
# endif
#else /* !_WIN32 */
# ifndef AW_SCORING_DECLARE
#   define AW_SCORING_DECLARE(rtn) rtn
# endif
#define HWND int
#define WINAPI 
#endif /* !_WIN32 */



#ifdef __cplusplus
extern "C" {
#endif

typedef struct aw_scoring_t aw_scoring_t;

/* . */
enum aw_scoring_algorithm_t
{
    /* Algorithm D100. */
    AW_SCORING_ALGORITHM_D100=1000100,

    /* Algorithm D150. */
    AW_SCORING_ALGORITHM_D150=1000150,

    /* Algorithm D300. */
    AW_SCORING_ALGORITHM_D300=1000300,

    /* Algorithm D350. */
    AW_SCORING_ALGORITHM_D350=1000350,

    /* Algorithm D600. */
    AW_SCORING_ALGORITHM_D600=1000600,

    /* Algorithm D900. */
    AW_SCORING_ALGORITHM_D900=1000900,

    /* Algorithm F200. */
    AW_SCORING_ALGORITHM_F200=1020200,

    /* Algorithm I500. */
    AW_SCORING_ALGORITHM_I500=1050500
};
typedef enum aw_scoring_algorithm_t aw_scoring_algorithm_t;

/* . */
enum aw_scoring_scoring_method_t
{
    /* No change is made to the FMR score. */
    AW_SCORING_SCORING_METHOD_NO_CHANGE=1,

    /* Normalization function(s) should be used. */
    AW_SCORING_SCORING_METHOD_NORMALIZE=2,

    /* . */
    AW_SCORING_SCORING_METHOD_FUSE_D600_D900=3
};
typedef enum aw_scoring_scoring_method_t aw_scoring_scoring_method_t;

/* Liveness decision. */
enum aw_scoring_liveness_decision_t
{
    /* A decision could not be made due to errors. */
    AW_SCORING_LIVENESS_DECISION_ERROR=-1,

    /* Subject is live. */
    AW_SCORING_LIVENESS_DECISION_LIVE=1,

    /* Subject is a spoof. */
    AW_SCORING_LIVENESS_DECISION_SPOOF=2
};
typedef enum aw_scoring_liveness_decision_t aw_scoring_liveness_decision_t;

/* Library Management */

/* <Function> aw_scoring_create
   <Description> This function creates the Scoring object.
   <Return Value>
     Pointer to an Scoring object, null if the object could not be allocated.
    */
AW_SCORING_DECLARE(aw_scoring_t*) aw_scoring_create();

/* <Function> aw_scoring_destroy
   <Description> This function destroys the Scoring object.
   <Parameters>
     aw_scoring - Library object pointer.
   <Return Value>
     None
    */
AW_SCORING_DECLARE(void) aw_scoring_destroy(
  aw_scoring_t* aw_scoring
);

/* Fusion */

/* <Function> aw_scoring_fuse_fmr_scores
   <Description> Returns a single FMR score fused from multiple FMR scores.
   <Parameters>
     aw_scoring - Library object pointer.
     fmr_scores - Array of FMR scores to fuse.
     fmr_scores_size - Size of Array of FMR scores to fuse.
   <Return Value>
     Fused FMR score.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_fuse_fmr_scores(
  aw_scoring_t* aw_scoring,
  aw_float_t* fmr_scores,
  size_t fmr_scores_size
);

/* <Function> aw_scoring_fuse_percent_scores
   <Description> Returns a single percent score fused from multiple percent
   scores.
   <Parameters>
     aw_scoring - Library object pointer.
     percent_scores - Array of percent scores to fuse.
     percent_scores_size - Size of Array of percent scores to fuse.
     gallery_sizes - Array of gallery sizes ordered with respect to
                     percent_scores; set each to 1 for verification; must be
                     same length as percent_scores.
     gallery_sizes_size - Size of Array of gallery sizes ordered with respect
                          to percent_scores; set each to 1 for verification;
                          must be same length as percent_scores.
     gallery_size_out - Gallery size used for output score; size of union of
                        subjects over modalities or set to 1 for verification.
   <Return Value>
     Fused percent score.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_fuse_percent_scores(
  aw_scoring_t* aw_scoring,
  aw_float_t* percent_scores,
  size_t percent_scores_size,
  aw_int32_t* gallery_sizes,
  size_t gallery_sizes_size,
  aw_int32_t gallery_size_out
);

/* <Function> aw_scoring_fuse_fmr_scores_with_minimum
   <Description> Returns a single FMR score fused from multiple FMR scores
   with a minimum score threshold (an initial AND-rule).
   <Parameters>
     aw_scoring - Library object pointer.
     fmr_scores - Array of FMR scores to fuse.
     fmr_scores_size - Size of Array of FMR scores to fuse.
     minimum_threshold - AND-rule threshold on scores
   <Return Value>
     Fused FMR score.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_fuse_fmr_scores_with_minimum(
  aw_scoring_t* aw_scoring,
  aw_float_t* fmr_scores,
  size_t fmr_scores_size,
  aw_float_t minimum_threshold
);

/* <Function> aw_scoring_fuse_fmr_scores_with_weights
   <Description> Returns a single FMR score fused from multiple FMR scores and
   weights.
   <Parameters>
     aw_scoring - Library object pointer.
     fmr_scores - Array of FMR scores to fuse.
     fmr_scores_size - Size of Array of FMR scores to fuse.
     weights - Array of weights ordered with respect to fmr_scores; must be
               same length as fmr_scores.
     weights_size - Size of Array of weights ordered with respect to
                    fmr_scores; must be same length as fmr_scores.
   <Return Value>
     Fused FMR score.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_fuse_fmr_scores_with_weights(
  aw_scoring_t* aw_scoring,
  aw_float_t* fmr_scores,
  size_t fmr_scores_size,
  aw_float_t* weights,
  size_t weights_size
);

/* <Function> aw_scoring_fuse_percent_scores_with_weights
   <Description> Returns a single percent score fused from multiple percent
   scores and weights.
   <Parameters>
     aw_scoring - Library object pointer.
     percent_scores - Array of percent scores to fuse.
     percent_scores_size - Size of Array of percent scores to fuse.
     gallery_sizes - Array of gallery sizes ordered with respect to
                     percent_scores; set each to 1 for verification; must be
                     same length as percent_scores.
     gallery_sizes_size - Size of Array of gallery sizes ordered with respect
                          to percent_scores; set each to 1 for verification;
                          must be same length as percent_scores.
     weights - Array of weights ordered with respect to percent_scores; must
               be same length as percent_scores.
     weights_size - Size of Array of weights ordered with respect to
                    percent_scores; must be same length as percent_scores.
     gallery_size_out - Gallery size used for output score; size of union of
                        subjects over modalities or set to 1 for verification.
   <Return Value>
     Fused percent score.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_fuse_percent_scores_with_weights(
  aw_scoring_t* aw_scoring,
  aw_float_t* percent_scores,
  size_t percent_scores_size,
  aw_int32_t* gallery_sizes,
  size_t gallery_sizes_size,
  aw_float_t* weights,
  size_t weights_size,
  aw_int32_t gallery_size_out
);

/* <Function> aw_scoring_fuse_multi_sample_fmr_scores
   <Description> Returns a single FMR score fused from FMR scores generated
   from multiple samples of the same instance.
   <Parameters>
     aw_scoring - Library object pointer.
     fmr_scores - Array of FMR scores to fuse.
     fmr_scores_size - Size of Array of FMR scores to fuse.
   <Return Value>
     Fused FMR score.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_fuse_multi_sample_fmr_scores(
  aw_scoring_t* aw_scoring,
  aw_float_t* fmr_scores,
  size_t fmr_scores_size
);

/* <Function> aw_scoring_fuse_multi_sample_percent_scores
   <Description> Returns a single percent score fused from percent scores
   generated from multiple samples of the same instance in a
   one-to-one comparison.
   <Parameters>
     aw_scoring - Library object pointer.
     percent_scores - Array of percent scores to fuse.
     percent_scores_size - Size of Array of percent scores to fuse.
   <Return Value>
     Fused percent score.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_fuse_multi_sample_percent_scores(
  aw_scoring_t* aw_scoring,
  aw_float_t* percent_scores,
  size_t percent_scores_size
);

/* <Function> aw_scoring_fuse_rank_scores
   <Description> Returns a single rank score fused from multiple rank scores.
   <Parameters>
     aw_scoring - Library object pointer.
     rank_scores - Array of rank scores to fuse.
     rank_scores_size - Size of Array of rank scores to fuse.
   <Return Value>
     Fused rank score.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_fuse_rank_scores(
  aw_scoring_t* aw_scoring,
  aw_float_t* rank_scores,
  size_t rank_scores_size
);

/* <Function> aw_scoring_fuse_ranked_quality_fte_scores
   <Description> Returns a single FTE score fused from most unlikely FTE
   scores selected from stream of scores.
   <Parameters>
     aw_scoring - Library object pointer.
     fte_scores - Array of most unlikely FTE scores to fuse.
     fte_scores_size - Size of Array of most unlikely FTE scores to fuse.
     total - Total number of scores in stream to draw from.
   <Return Value>
     Fused FTE score.
    */
AW_SCORING_DECLARE(aw_double_t) aw_scoring_fuse_ranked_quality_fte_scores(
  aw_scoring_t* aw_scoring,
  aw_double_t* fte_scores,
  size_t fte_scores_size,
  aw_int32_t total
);

/* <Function> aw_scoring_fuse_liveness
   <Description> Returns a liveness decision from a liveness JSON.
   <Parameters>
     aw_scoring - Library object pointer.
     liveness_json - Liveness JSON.
   <Return Value>
     Liveness decision.
    */
AW_SCORING_DECLARE(aw_scoring_liveness_decision_t) aw_scoring_fuse_liveness(
  aw_scoring_t* aw_scoring,
  const aw_char_t* liveness_json
);

/* Algorithm Specific */

/* <Function> aw_scoring_get_scoring_method
   <Description> Gets the scoring method used for a set of algorithms.
   <Parameters>
     aw_scoring - Library object pointer.
     workflow - List of algorithms used, in order.
     workflow_size - Size of List of algorithms used, in order.
   <Return Value>
     FMR score.
    */
AW_SCORING_DECLARE(aw_scoring_scoring_method_t) aw_scoring_get_scoring_method(
  aw_scoring_t* aw_scoring,
  aw_scoring_algorithm_t* workflow,
  size_t workflow_size
);

/* <Function> aw_scoring_fuse_d600_d900
   <Description> Fuses a set of D600 and D900 rank scores to generate a single
   fmr score.
   <Parameters>
     aw_scoring - Library object pointer.
     d600_rank_score - D600 rank score.
     d900_rank_score - D900 rank score.
     finger_count - Number of fingers used in the search.
   <Return Value>
     FMR score.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_fuse_d600_d900(
  aw_scoring_t* aw_scoring,
  aw_float_t d600_rank_score,
  aw_float_t d900_rank_score,
  aw_int32_t finger_count
);

/* <Function> aw_scoring_fuse_v600_v900
   <Description> Fuses a set of V600 and V900 FMR scores to generate a single
   FMR score.
   <Parameters>
     aw_scoring - Library object pointer.
     v600_fmr_score - D600 fmr score.
     v900_fmr_score - D900 fmr score.
   <Return Value>
     FMR score.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_fuse_v600_v900(
  aw_scoring_t* aw_scoring,
  aw_float_t v600_fmr_score,
  aw_float_t v900_fmr_score
);

/* Normalization */

/* <Function> aw_scoring_calculate_normalization_parameters
   <Description> Calculates the normalization parameters that should be
   applied to an array of FMR scores.
   <Parameters>
     aw_scoring - Library object pointer.
     fmr_scores - Array of FMR scores to calculate normalization parameters
                  for.
     fmr_scores_size - Size of Array of FMR scores to calculate normalization
                       parameters for.
     result_shift - Score shift.
     result_scale - Score scale.
   <Return Value>
     Error code if an error was encountered.
    */
AW_SCORING_DECLARE(aw_int32_t) aw_scoring_calculate_normalization_parameters(
  aw_scoring_t* aw_scoring,
  aw_float_t* fmr_scores,
  size_t fmr_scores_size,
  aw_float_t* result_shift,
  aw_float_t* result_scale
);

/* <Function> aw_scoring_normalize
   <Description> Normalizes an FMR score.
   <Parameters>
     aw_scoring - Library object pointer.
     parameters_shift - Score shift.
     parameters_scale - Score scale.
     fmr_score - FMR score to normalize.
   <Return Value>
     Normalized FMR score.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_normalize(
  aw_scoring_t* aw_scoring,
  aw_float_t parameters_shift,
  aw_float_t parameters_scale,
  aw_float_t fmr_score
);

/* Scores */

/* <Function> aw_scoring_convert_missing_score_data_to_fmr_score
   <Description> Converts data describing missing score in identification
   problem to FMR-based score.
   <Parameters>
     aw_scoring - Library object pointer.
     gallery_size - Gallery size used in identification search.
     result_list_size - Size of result list returned from search.
     lowest_fmr_score - Lowest FMR score in result list (score at the last
                        rank).
   <Return Value>
     FMR score.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_convert_missing_score_data_to_fmr_score(
  aw_scoring_t* aw_scoring,
  aw_int32_t gallery_size,
  aw_int32_t result_list_size,
  aw_float_t lowest_fmr_score
);

/* <Function> aw_scoring_convert_fmr_score_to_fpir_score
   <Description> Converts a logFMR score to a logFPIR score using the gallery
   size.
   <Parameters>
     aw_scoring - Library object pointer.
     fmr_score - FMR score.
     gallery_size - Gallery size.
   <Return Value>
     FPIR score.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_convert_fmr_score_to_fpir_score(
  aw_scoring_t* aw_scoring,
  aw_float_t fmr_score,
  aw_int32_t gallery_size
);

/* <Function> aw_scoring_convert_fpir_score_to_fmr_score
   <Description> Converts a logFPIR score to a logFMR score using the gallery
   size.
   <Parameters>
     aw_scoring - Library object pointer.
     fpir_score - FPIR score.
     gallery_size - Gallery size.
   <Return Value>
     FMR score.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_convert_fpir_score_to_fmr_score(
  aw_scoring_t* aw_scoring,
  aw_float_t fpir_score,
  aw_int32_t gallery_size
);

/* <Function> aw_scoring_convert_fmr_score_to_percent_score
   <Description> Calculates the percent score [0,1] given a logFMR score and
   gallery size.
   <Parameters>
     aw_scoring - Library object pointer.
     fmr_score - FMR score to convert.
     gallery_size - Gallery size (equals 1 for verification).
   <Return Value>
     Percent score.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_convert_fmr_score_to_percent_score(
  aw_scoring_t* aw_scoring,
  aw_float_t fmr_score,
  aw_int32_t gallery_size
);

/* <Function> aw_scoring_convert_fpir_score_to_percent_score
   <Description> Calculates the percent score [0,1] given a logFPIR score.
   <Parameters>
     aw_scoring - Library object pointer.
     fpir_score - FPIR score to convert.
   <Return Value>
     Percent score.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_convert_fpir_score_to_percent_score(
  aw_scoring_t* aw_scoring,
  aw_float_t fpir_score
);

/* <Function> aw_scoring_convert_percent_score_to_fmr_score
   <Description> Converts a percent score [0,1] back to a logFMR score using
   gallery size.
   <Parameters>
     aw_scoring - Library object pointer.
     percent_score - Percent score to convert.
     gallery_size - Gallery size (equals 1 for verification).
   <Return Value>
     FMR score.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_convert_percent_score_to_fmr_score(
  aw_scoring_t* aw_scoring,
  aw_float_t percent_score,
  aw_int32_t gallery_size
);

/* <Function> aw_scoring_convert_percent_score_to_fpir_score
   <Description> Converts a percent score [0,1] back to a logFPIR score.
   <Parameters>
     aw_scoring - Library object pointer.
     percent_score - Percent score to convert.
   <Return Value>
     FPIR score.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_convert_percent_score_to_fpir_score(
  aw_scoring_t* aw_scoring,
  aw_float_t percent_score
);

/* <Function> aw_scoring_convert_equal_error_rate_to_q
   <Description> Calculates the accuracy parameterization, q, given an equal
   error rate.
   <Parameters>
     aw_scoring - Library object pointer.
     eer - Equal error rate.
   <Return Value>
     Accuracy metric, q.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_convert_equal_error_rate_to_q(
  aw_scoring_t* aw_scoring,
  aw_float_t eer
);

/* <Function> aw_scoring_convert_error_rates_to_q
   <Description> Calculates the accuracy parameterization, q, given one point
   on a DET curve.
   <Parameters>
     aw_scoring - Library object pointer.
     fmr - False match rate.
     frr - False rejection (or 'non-match') rate.
   <Return Value>
     Accuracy metric, q.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_convert_error_rates_to_q(
  aw_scoring_t* aw_scoring,
  aw_float_t fmr,
  aw_float_t frr
);

/* <Function> aw_scoring_convert_identification_error_rates_to_q
   <Description> Calculates the accuracy parameterization, q, given one point
   on an identification DET curve (for selectivity of 1).
   <Parameters>
     aw_scoring - Library object pointer.
     fpir - False positive identification rate.
     fnir - False negative identification rate.
     gallery_size - Gallery size.
   <Return Value>
     Accuracy metric, q.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_convert_identification_error_rates_to_q(
  aw_scoring_t* aw_scoring,
  aw_float_t fpir,
  aw_float_t fnir,
  aw_int32_t gallery_size
);

/* <Function> aw_scoring_convert_recognition_rate_to_q
   <Description> Calculates the accuracy parameterization, q, given the
   recongition rate and gallery size.
   <Parameters>
     aw_scoring - Library object pointer.
     recognition_rate - Recognition rate, or percent of mates at rank 1.
     gallery_size - Gallery size.
   <Return Value>
     Accuracy metric, q.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_convert_recognition_rate_to_q(
  aw_scoring_t* aw_scoring,
  aw_float_t recognition_rate,
  aw_int32_t gallery_size
);

/* <Function> aw_scoring_convert_power_law_exponent_to_q
   <Description> Calculates the accuracy parameterization, q, given the power
   law exponent, p, of ROC fit: TMR = FMR^p.
   <Parameters>
     aw_scoring - Library object pointer.
     power_law_exponent - Parameter, p, of ROC fit: TMR = FMR^p.
   <Return Value>
     Accuracy metric, q.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_convert_power_law_exponent_to_q(
  aw_scoring_t* aw_scoring,
  aw_float_t power_law_exponent
);

/* <Function> aw_scoring_convert_q_to_power_law_exponent
   <Description> Calculates the power law exponent, p, of ROC fit: TMR =
   FMR^p, given the accuracy parameterization, q.
   <Parameters>
     aw_scoring - Library object pointer.
     accuracy_q - Accuracy metric, q.
   <Return Value>
     Parameter, p, of ROC fit: TMR = FMR^p.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_convert_q_to_power_law_exponent(
  aw_scoring_t* aw_scoring,
  aw_float_t accuracy_q
);

/* <Function> aw_scoring_convert_q_to_fusion_weight
   <Description> Calculates a weight for use in weighted fusion formula given
   the accuracy parameterization, q.
   <Parameters>
     aw_scoring - Library object pointer.
     accuracy_q - Accuracy metric, q.
   <Return Value>
     An accuracy-based fusion weight.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_convert_q_to_fusion_weight(
  aw_scoring_t* aw_scoring,
  aw_float_t accuracy_q
);

/* <Function> aw_scoring_calculate_confidence
   <Description> Calculates the confidence, or probability, we have a genuine.
   <Parameters>
     aw_scoring - Library object pointer.
     fmr_score - FMR score to calculate confidence for.
     gallery_size - Gallery size.
     accuracy_q - The accuracy metric, q.
   <Return Value>
     Confidence.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_calculate_confidence(
  aw_scoring_t* aw_scoring,
  aw_float_t fmr_score,
  aw_int32_t gallery_size,
  aw_float_t accuracy_q
);

/* <Function> aw_scoring_calculate_expected_fmr_score_at_rank
   <Description> Calculates the expected logFMR score in a search result list
   for a given rank and gallery size.
   <Parameters>
     aw_scoring - Library object pointer.
     rank - The rank in a gallery result list.
     gallery_size - Gallery size.
   <Return Value>
     FMR score.
    */
AW_SCORING_DECLARE(aw_float_t) aw_scoring_calculate_expected_fmr_score_at_rank(
  aw_scoring_t* aw_scoring,
  aw_int32_t rank,
  aw_int32_t gallery_size
);

/* <Function> aw_scoring_calculate_fpir_for_fmr_score_at_rank
   <Description> Calculates the false positive rate at a logFMR score for a
   given rank and gallery size.
   <Parameters>
     aw_scoring - Library object pointer.
     fmr_score - FMR score.
     rank - The rank in a gallery result list.
     gallery_size - Gallery size.
   <Return Value>
     False positive rate.
    */
AW_SCORING_DECLARE(aw_double_t) aw_scoring_calculate_fpir_for_fmr_score_at_rank(
  aw_scoring_t* aw_scoring,
  aw_double_t fmr_score,
  aw_int32_t rank,
  aw_int32_t gallery_size
);

/* Workflows */

/* <Function> aw_scoring_calculate_workflow
   <Description> .
   <Parameters>
     aw_scoring - Library object pointer.
     biometric_count - How many biometrics are available for both gallery and
                       probes.
     desired_search_time - Desired time to spend on the search.
     algorithm_speeds_algorithm - Comparison algorithm.
     algorithm_speeds_comparisons_per_second - How many inidividual biometric
                                               comparisons per second the
                                               algorithm can perform.
     algorithm_speeds_size - Size of algorithm_speeds.
     gallery_size - Gallery size to target with the workflow.
     result_algorithm - Comparison algorithm.
     result_biometric_count - How many biometrics to use with this algorithm.
     result_cutoff - Cutoff indicating how many subjects/encounters to send to
                     the next stage. 0-1.0 indicate a percentage. >1.0
                     indicates a specific number.
     result_size - Size of result.
   <Return Value>
     Error code if an error was encountered.
    */
AW_SCORING_DECLARE(aw_int32_t) aw_scoring_calculate_workflow(
  aw_scoring_t* aw_scoring,
  aw_int32_t biometric_count,
  aw_float_t desired_search_time,
  aw_scoring_algorithm_t* algorithm_speeds_algorithm,
  aw_float_t* algorithm_speeds_comparisons_per_second,
  size_t algorithm_speeds_size,
  aw_int32_t gallery_size,
  aw_scoring_algorithm_t** result_algorithm,
  aw_int32_t** result_biometric_count,
  aw_float_t** result_cutoff,
  size_t* result_size
);

/* Version Functions */

/* <Function> aw_scoring_get_version
   <Description> Returns integer value indicating the current version of the
   component.
   <Return Value>
     An integer indicating the library version number.
    */
AW_SCORING_DECLARE(aw_int32_t) aw_scoring_get_version();

/* <Function> aw_scoring_get_version_string
   <Description> Returns a text string indicating the current version of the
   component.
   <Return Value>
     A string indicating the library version number.
    */
AW_SCORING_DECLARE(const aw_char_t*) aw_scoring_get_version_string();

/* Error Handling */

/* <Function> aw_scoring_get_last_error
   <Description> Returns the status code of the last function called.
   <Parameters>
     aw_scoring - Library object pointer.
   <Return Value>
     Status code of the last function called.
    */
AW_SCORING_DECLARE(aw_int32_t) aw_scoring_get_last_error(
  aw_scoring_t* aw_scoring
);

/* <Function> aw_scoring_get_last_error_details
   <Description> Returns the status code of the last function called.
   <Parameters>
     aw_scoring - Library object pointer.
   <Return Value>
     Details of the last error that occurred.
    */
AW_SCORING_DECLARE(const aw_char_t*) aw_scoring_get_last_error_details(
  aw_scoring_t* aw_scoring
);



#ifdef __cplusplus
}
#endif

#endif /* _AW_SCORING_H_ */

