/**********************************************************************
 *
 * Copyright (C) 2020 Aware, Inc.
 *
 * $Workfile:  $    $Revision:  $
 * Last Modified: $Date: $ by: $Author:  $
 *
 **********************************************************************/

/* DO NOT EDIT THIS FILE. IT IS AUTO-GENERATED */

#ifndef _AW_PREFACE_H_
#define _AW_PREFACE_H_

#ifdef __IOS__
# include "aw_types.h"
#else
# include "awlib/aw_types.h"
#endif

#if defined(_WIN32)
# include <windows.h>
# ifndef AW_PREFACE_DECLARE
#   if !defined(AW_PREFACE_STATIC_LIBRARY)
#     define AW_PREFACE_DECLARE(rtn) __declspec(dllimport) rtn WINAPI
#   else 
#     define AW_PREFACE_DECLARE(rtn) rtn
#   endif 
# endif
#else /* !_WIN32 */
# ifndef AW_PREFACE_DECLARE
#   define AW_PREFACE_DECLARE(rtn) rtn
# endif
#define HWND int
#define WINAPI 
#endif /* !_WIN32 */



#ifdef __cplusplus
extern "C" {
#endif

typedef struct aw_preface_t aw_preface_t;

/* Value indicating that a Metric Constraint is not constrained. */
#define AW_PREFACE_UNCONSTRAINED -999

/* Compliance result */
enum aw_preface_metric_status_t
{
    /* Compliance not computed */
    AW_PREFACE_METRIC_STATUS_UNDETERMINED=0,

    /* Compliance passed */
    AW_PREFACE_METRIC_STATUS_OK=1,

    /* Compliance failed, value too low */
    AW_PREFACE_METRIC_STATUS_FAIL_LOW=2,

    /* Compliance failed, value too high */
    AW_PREFACE_METRIC_STATUS_FAIL_HIGH=3,

    /* Compliance failed, value not allowed */
    AW_PREFACE_METRIC_STATUS_FAIL_VALUE=4
};
typedef enum aw_preface_metric_status_t aw_preface_metric_status_t;

/* Facial features.  All locations are from the subject's perspective. */
enum aw_preface_face_feature_t
{
    /* Location of the subject's left eye center . */
    AW_PREFACE_FACE_FEATURE_LEFT_EYE_CENTER=0,

    /* Location of the subject's right eye center. */
    AW_PREFACE_FACE_FEATURE_RIGHT_EYE_CENTER=1,

    /* Location of the subject's nose tip. */
    AW_PREFACE_FACE_FEATURE_NOSE_TIP=2,

    /* Location of the subject's mouth center. */
    AW_PREFACE_FACE_FEATURE_MOUTH_CENTER=3,

    /* Location of the left side of the subject's head. */
    AW_PREFACE_FACE_FEATURE_LEFT_SIDE=4,

    /* Location of the right side of the subject's head. */
    AW_PREFACE_FACE_FEATURE_RIGHT_SIDE=5,

    /* Location of the subject's chin tip. */
    AW_PREFACE_FACE_FEATURE_CHIN_TIP=6,

    /* Location of the subject's head top. */
    AW_PREFACE_FACE_FEATURE_HEAD_TOP=7,

    /* Location of the top left corner of the subject's face outline. */
    AW_PREFACE_FACE_FEATURE_FACE_OUTLINE_TOP_LEFT=8,

    /* Location of the top right corner of the subject's face outline. */
    AW_PREFACE_FACE_FEATURE_FACE_OUTLINE_TOP_RIGHT=9,

    /* Location of the bottom left corner of the subject's face outline. */
    AW_PREFACE_FACE_FEATURE_FACE_OUTLINE_BOTTOM_LEFT=10,

    /* Location of the bottom right corner of the subject's face outline. */
    AW_PREFACE_FACE_FEATURE_FACE_OUTLINE_BOTTOM_RIGHT=11,

    /* Location of the top left corner of the subject's head outline. */
    AW_PREFACE_FACE_FEATURE_HEAD_OUTLINE_TOP_LEFT=12,

    /* Location of the top right corner of the subject's head outline. */
    AW_PREFACE_FACE_FEATURE_HEAD_OUTLINE_TOP_RIGHT=13,

    /* Location of the bottom left corner of the subject's head outline. */
    AW_PREFACE_FACE_FEATURE_HEAD_OUTLINE_BOTTOM_LEFT=14,

    /* Location of the bottom right corner of the subject's head outline. */
    AW_PREFACE_FACE_FEATURE_HEAD_OUTLINE_BOTTOM_RIGHT=15
};
typedef enum aw_preface_face_feature_t aw_preface_face_feature_t;

/* Image metrics */
enum aw_preface_metric_t
{
    /* The width of the image measured in Pixels. */
    AW_PREFACE_METRIC_IMAGE_WIDTH=1,

    /* The height of the image measured in Pixels. */
    AW_PREFACE_METRIC_IMAGE_HEIGHT=2,

    /* The number of color channels in the image. Valid values are 1 for
       Grayscale and 3 for RGB. */
    AW_PREFACE_METRIC_NUMBER_CHANNELS=3,

    /* The distance between the left and right eye centers measured in
       Pixels. */
    AW_PREFACE_METRIC_EYE_SEPARATION=4,

    /* The location of the eye axis as a fraction of the image height up
       from the bottom. This is BB:B in the ISO standard. */
    AW_PREFACE_METRIC_EYE_AXIS_LOCATION_RATIO=5,

    /* The location of the vertical centerline as a fraction of the image
       width measured from the left side of the image. This is AA:A in the
       ISO standard. */
    AW_PREFACE_METRIC_CENTERLINE_LOCATION_RATIO=6,

    /* The ratio of image height to image width. This is B:A in the ISO
       standard. */
    AW_PREFACE_METRIC_HEIGHT_TO_WIDTH_RATIO=7,

    /* The ratio of the image's width to the head's width. This is A:CC in
       the ISO standard. */
    AW_PREFACE_METRIC_IMAGE_WIDTH_TO_HEAD_WIDTH_RATIO=8,

    /* The ratio of the head's height to the image's height. This is DD:B in
       the ISO standard. */
    AW_PREFACE_METRIC_HEAD_HEIGHT_TO_IMAGE_HEIGHT_RATIO=9,

    /* The measurement of the subject's head's yaw angle in degrees.
       Negative value indicates the head is turned to the right. Positive
       value indicates the head is turned to the left.  Typical values range
       between -20 and +20 degrees. */
    AW_PREFACE_METRIC_POSE_ANGLE_YAW=10,

    /* The measurement of the subject's head's pitch angle in degrees.
       Negative values indicate the head is tilted up. Positive values
       indicate the head is tilted down. Typical values range between -5 and
       +5 degrees. */
    AW_PREFACE_METRIC_POSE_ANGLE_PITCH=11,

    /* The extent to which the illumination of the image is not symmetrical.
       A score of 0 indicates symmetric illumination. A score of 100
       indicates a high degree of asymmetry in illumination. Values less
       than or equal to 60 indicate the illumination is suitable and
       acceptable. Values greater than or equal to 80 indicate possible
       needs to re-capture images. */
    AW_PREFACE_METRIC_DEGREE_OF_ILLUMINATION_ASYMMETRY=12,

    /* The number of bits in the dynamic range of the facial region in the
       input image.\\There are 256 possible gray levels in typical images.
       Black is 0, white is 255 and all other graylevels are in between.
       Ideally, a face image will have graylevels that range from black (0)
       to white (255). In other words, you want a facial region to take full
       advantage of the graylevel range - it should have a full distribution
       of gray levels. For example, an image that is taken under low light
       levels will have a very small range of graylevels, e.g. black (0) up
       to some number well below 255. On the other hand. an image that is
       taken under very bright conditions will also have a very small range
       of graylevels, but the darkest pixel might be significantly higher
       than 0 and many pixels might be saturated white (255). This
       distribution of gray levels is the dynamic range - the optimal
       dynamic range is 256 (the total number of graylevels possible) in the
       facial region. For technical/historical reasons, this number is
       converted to a logarithm to the base 2, so 256 = 2**8 (2 to the
       exponent 8 is equal to 256) and the optimal range is 8.0. If the
       total number of graylevels is less than 256, say only 128, this
       number is 7.0 since 2**7 = 128. A facial dynamic range that has a
       range of graylevels that is greater than 128 but less than 256
       becomes some number between 7 and 8. The unit for dynamic range using
       this formula is bits.\\The ISO standard specifies that the minimum
       facial dynamic range should be 7 bits, or 128 graylevels. Preface
       software outputs the dynamic range only in the facial region, as some
       number of bits, using the formula described above. \\Correctable
       values can be specified for this metric. When used in a profile they
       instruct the software to automatically attempt image enhancement if
       the dynamic range is in a certain range. Typically that range should
       be just below the acceptable range (e.g. 6.8 to 7.0), since you don't
       want enhancement to be applied if the image is very bad to begin
       with. */
    AW_PREFACE_METRIC_FACIAL_DYNAMIC_RANGE=13,

    /* The average luminance measured from the facial region. Good values
       are generally in the range from 25 to 75, however, this is also
       dependent on the Facial Dynamic Range. Low values indicate that the
       facial region may be too dark, while high values indicate the facial
       region may be too light. The correctable values can be specified in a
       profile. If this the correctable range is specified, auto-enhancement
       is attempted only if the facial brightness range is within the
       specified limits. */
    AW_PREFACE_METRIC_PERCENT_FACIAL_BRIGHTNESS=14,

    /* The measure of how well the dynamic range is centered in the facial
       brightness distribution. Typical scores are in the range from 20 to
       100. Optimal scores should be greater than or equal to 60. Scores
       less than 60 indicate that the facial region may be too dark. A score
       of 0 indicates that the facial region has too much saturated black.
       If a correctable range is specified, auto-enhancement is attempted
       only if the brightness score range is within the specified limits. */
    AW_PREFACE_METRIC_BRIGHTNESS_SCORE=15,

    /* The likelihood of a saturated coloring present in the subject's
       facial region. A score of 0 indicates that a saturated color was not
       detected. A score of 100 indicates that a saturated color was
       detected. */
    AW_PREFACE_METRIC_PERCENT_FACIAL_SATURATION=16,

    /* The likelihood that the subject is smiling or has their mouth open. A
       score of 0 indicates that a smile has not been detected. A score of
       100 indicates that a smile has been detected. */
    AW_PREFACE_METRIC_SMILE_LIKELIHOOD=17,

    /* The likelihood that there are shadows present on the subject's facial
       region. A score of 0 indicates that shadows have not been detected in
       the subject's facial region. A score of 100 indicates shadows have
       been detected in the subject's facial region. */
    AW_PREFACE_METRIC_SHADOWS_LIKELIHOOD=18,

    /* The likelihood that the subject's face is in focus in the image. A
       score of 0 indicates that the subject's face was not detected as in
       focus. A score of 100 indicates a that the subject's face was
       detected as in focus. */
    AW_PREFACE_METRIC_FOCUS_LIKELIHOOD=19,

    /* The measurement of how well high-frequency details appear on the
       subject's face. A score of 0 indicates a low level of high-frequency
       details detected. A score of 100 indicates a high level of
       high-frequency details detected. */
    AW_PREFACE_METRIC_SHARPNESS_LIKELIHOOD=20,

    /* The likelihood of the presence of unnatural color in the subject's
       facial region. A score of 0 indicates a natural skin coloration was
       detected. A score of 100 indicates an unnatural skin color has been
       detected in the subject's facial region. */
    AW_PREFACE_METRIC_UNNATURAL_COLOR_LIKELIHOOD=21,

    /* The measurement of the subject's head's roll angle in degrees. A
       negative value indicates the head is rotated counter-clockwise. A
       positive value indicates the head is rotated clockwise. By default,
       faces are always corrected for roll when constructing an image.
       Specifying a correctable range will overrides this default behavior,
       so that users can prevent rotation correction by limiting the
       correctable range to e.g cMin=0 cMax=0. */
    AW_PREFACE_METRIC_EYE_AXIS_ANGLE=22,

    /* A measurement of how well the dynamic range is spread in eye regions
       of the subject. Scores of 60 or higher are adequate with higher
       scores being better. Scores of 40 or lower are considered to be
       inadequate. This value is often (though not necessarily) correlated
       with facial dynamic range. If a correctable range is specified in a
       Profile, auto-enhancement will be attempted during construction if
       the eye contrast range is within the specified limits. */
    AW_PREFACE_METRIC_EYE_CONTRAST=23,

    /* The likelihood of glasses present on the subject's face. A score of 0
       indicates that glasses were not detected. A score of 100 indicates
       that glasses were detected. */
    AW_PREFACE_METRIC_GLASSES_LIKELIHOOD=24,

    /* The likelihood of tinted or dark lensed glasses present on the
       subjects face. If the subject was not detected wearing glasses, this
       score will return as 0. Otherwise, a score of 0 indicates that
       glasses with tinted or dark lenses were not detected. A score of 100
       indicates that glasses with tinted or dark lenses were detected. */
    AW_PREFACE_METRIC_DARK_GLASSES_LIKELIHOOD=25,

    /* The likelihood that a glare was present on the subject's glasses. If
       the subject was not detected wearing glasses, this score will return
       as 0. Otherwise, a score of 0 indicates that no glare was detected on
       the subject's glasses. A score of 100 indicates that glare was
       detected on the subject's glasses. */
    AW_PREFACE_METRIC_GLARE_LIKELIHOOD=26,

    /* The likelihood that the subject is wearing glasses with a heavy
       frame. If the subject was not detected wearing glasses, this score
       will return as 0. Otherwise, a score of 0 indicates that glasses with
       heavy frames were not detected. A score of 100 indicates that glasses
       with heavy frames were detected. */
    AW_PREFACE_METRIC_HEAVY_FRAMES_LIKELIHOOD=27,

    /* The likelihood that the subject's right eye is obstructed by their
       glasses. If the subject was not detected wearing glasses or if the
       right eye was not detected as valid then this score will return as 0.
       Otherwise, a score of 0 indicates the that no obstruction was
       detected. A score of 100 indicates that an obstruction was detected. */
    AW_PREFACE_METRIC_FRAME_COVERED_RIGHT_EYE_LIKELIHOOD=28,

    /* The likelihood that the subject's right eye is obstructed by their
       hair. If the subject's right eye was not detected as valid then this
       will return a score of 0.  Otherwise, a score of 0 indicates that no
       obstruction was detected. A score of 100 indicates that an
       obstruction was detected. */
    AW_PREFACE_METRIC_HAIR_COVERED_RIGHT_EYE_LIKELIHOOD=29,

    /* The likelihood that the subject's right eye is closed. If the
       subject's right eye was not detected as valid then this will return a
       score of 0. Otherwise, a score of 0 indicates that the subject's
       right eye was detected as open. A score of 100 indicates that the
       subject's right eye was detected as closed. */
    AW_PREFACE_METRIC_RIGHT_EYE_CLOSED_LIKELIHOOD=30,

    /* The likelihood that the subject's right eye is visible. A score of 0
       indicates the subject's right eye was not detected as visible. A
       score of 100 indicates the subject's right eye was detected as
       visible. The score returned by this metric affects the values of the
       Right Eye Obstructed by Glasses, Right Eye Obstructed by Hair, Right
       Eye Closed Metrics, and Off-Angle Gaze. */
    AW_PREFACE_METRIC_RIGHT_EYE_VALID_LIKELIHOOD=31,

    /* The likelihood that the subject's left eye is obstructed by their
       glasses. If the subject was not detected wearing glasses or if the
       left eye was not detected as valid then this score will return as 0.
       Otherwise, a score of 0 indicates that no obstruction was detected. A
       score of 100 indicates that an obstruction was detected. */
    AW_PREFACE_METRIC_FRAME_COVERED_LEFT_EYE_LIKELIHOOD=32,

    /* The likelihood that the subject's left eye is obstructed by their
       hair. If the subject's left eye was not detected as valid then this
       will return a score of 0. Otherwise, a score of 0 indicates that no
       obstructioned was detected. A score of 100 indicates that an
       obstruction was detected. */
    AW_PREFACE_METRIC_HAIR_COVERED_LEFT_EYE_LIKELIHOOD=33,

    /* The likelihood that the subject's left eye is closed. If the
       subject's left eye was not detected as valid then this will return a
       score of 0. Otherwise, a score of 0 indicates the subject's left eye
       was detected as open. A score of 100 indicates that the subject's
       left eye was detected as closed. */
    AW_PREFACE_METRIC_LEFT_EYE_CLOSED_LIKELIHOOD=34,

    /* The likelihood that the subject's left eye is visbile. A score of 0
       indicates the subject's left eye was not detected as visibile. A
       score of 100 indicates the subject's left eye was detected as
       visibile.  The score returned by this metric affects the values of
       the Left Eye Obstructed by Glasses, Left Eye Obstructed by Hair, Left
       Eye Closed Metrics, and Off-Angle Gaze. */
    AW_PREFACE_METRIC_LEFT_EYE_VALID_LIKELIHOOD=35,

    /* The likelihood of the subject's eyes not directly looking at the
       camera. If either of the subject's eyes are not visible or obstructed
       then a score of 0 will be returned. Otherwise, a score of 0 indicates
       the subject's gaze was detected as being directed at the camera. A
       score of 100 indicates the subject's gaze was detected as not being
       directed at the camera. */
    AW_PREFACE_METRIC_OFF_ANGLE_GAZE_LIKELIHOOD=36,

    /* The likelihood that a subject was detected as having a Red-Eye effect
       in the image. A score of 0 indicates that the subject was not
       detected having a Red-Eye effect. A score of 100 indicates that the
       subject was detected as having a Red-Eye effect. */
    AW_PREFACE_METRIC_REDEYE_LIKELIHOOD=37,

    /* The likelihood that the subject's forehead was detected as being
       obstructed by a hat or other covering. A score of 0 indicates that an
       obstruction or head covering was not detected. A score of 100
       indicates that an obstruction or head covering was detected. */
    AW_PREFACE_METRIC_FOREHEAD_COVERING_LIKELIHOOD=38,

    /* The subject's estimated age based on facial analysis. */
    AW_PREFACE_METRIC_ESTIMATED_AGE=39,

    /* The confidence that the subject is a child. A score of 0 indicates no
       confidence in the subject being a child. A score of 100 indicates a
       high confidence in the subject being a child. */
    AW_PREFACE_METRIC_AGE_CHILD_CONFIDENCE=40,

    /* The confidence that the subject is a youth. A score of 0 indicates no
       confidence in the subject being a youth. A score of 100 indicates a
       high confidence in the subject being a youth. */
    AW_PREFACE_METRIC_AGE_YOUTH_CONFIDENCE=41,

    /* The confidence that the subject is an adult. A score of 0 indicates
       no confidence in the subject being an adult. A score of 100 indicates
       a high confidence in the subject being an adult. */
    AW_PREFACE_METRIC_AGE_ADULT_CONFIDENCE=42,

    /* The confidence that the subject is a senior. A score of 0 indicates
       no confidence in the subject being a senior. A score of 100 indicates
       a high confidence in the subject being a senior. */
    AW_PREFACE_METRIC_AGE_SENIOR_CONFIDENCE=43,

    /* The confidence that the subject is a female. A score of 0 indicates
       no confidence in the subject being a female. A score of 100 indicates
       a high confidence in the subject being a female. */
    AW_PREFACE_METRIC_FEMALE_CONFIDENCE=44,

    /* The confidence that the subject is a male. A score of 0 indicates no
       confidence in the subject being a male. A score of 100 indicates a
       high confidence in the subject being a male. */
    AW_PREFACE_METRIC_MALE_CONFIDENCE=45,

    /* The confidence that the subject is white. A score of 0 indicates no
       confidence in the subject being white. A score of 100 indicates a
       high confidence in the subject being white. */
    AW_PREFACE_METRIC_RACE_WHITE_CONFIDENCE=46,

    /* The confidence that the subject is black. A score of 0 indicates no
       confidence in the subject being black. A score of 100 indicates a
       high confidence in the subject being black. */
    AW_PREFACE_METRIC_RACE_BLACK_CONFIDENCE=47,

    /* The confidence that the subject is asian. A score of 0 indicates no
       confidence in the subject being asian. A score of 100 indicates high
       confidence in the subject being asian. */
    AW_PREFACE_METRIC_RACE_ASIAN_CONFIDENCE=48,

    /* The level of gray detected in the background. Lower scores indicate
       lighter levels of gray detected. Higher scores indicate dark levels
       of gray detected. Lower scores are preferred over higher scores
       provided there is sufficient contrast between the background and the
       facial area. The optimal value is 18. */
    AW_PREFACE_METRIC_PERCENT_BACKGROUND_GRAY=49,

    /* The degree of color uniformity detected in the background of the
       image. A score of 0 indicates a non-uniform background was detected.
       A score of 100 indicates a uniform (single color) background was
       detected. */
    AW_PREFACE_METRIC_PERCENT_BACKGROUND_UNIFORMITY=50,

    /* The likelihood that the background is cluttered. A score of 0
       indicates no background clutter detected. A score of 100 indicates a
       cluttered background was detected. */
    AW_PREFACE_METRIC_DEGREE_OF_CLUTTER=51,

    /* The type of background detected. A score of 1 indicates a simple
       background was detected. A score of 2 indicates a complex background
       was detected. */
    AW_PREFACE_METRIC_BACKGROUND_TYPE=52,

    /* A measurement of the RGB Color Balancing in the background.  A
       balanced color is one with the same Red, Green, and Blue color
       channel values.  Lower scores indicate less color balance has been
       detected.  Higher scores indicate that more color balance has been
       detected. */
    AW_PREFACE_METRIC_PERCENT_COLOR_BALANCED=53,

    /* Specify the type of background padding used when performing
       Construction. Valid Values are:\\1 - Pad using pixels of the average
       background color. \\2 - Pad using the pixels in the edge row or
       column \\3 - Do not pad at all. \\4 - Pad using black pixels. */
    AW_PREFACE_METRIC_BACKGROUND_PAD_TYPE=54,

    /* Define the maximum amount of padding for Construction to use when
       extending the image as a multiple of the head's width.  I.E. A
       maximum of 2.0 will pad up to two times the subject's head width in
       pixels. */
    AW_PREFACE_METRIC_CONDITIONAL_PADDING=55,

    /* Define the JPEG Quality Level used for JPEG compression during
       Construction. This is only applicable when using the JPEG Image
       Format. */
    AW_PREFACE_METRIC_JPEG_QUALITY_LEVEL=56,

    /* Define the minimum and maximum limits of the file size for a JPEG
       2000 image created during Construction. This is only applicable when
       using the JPEG 2000 Image Format. */
    AW_PREFACE_METRIC_FILE_SIZE=57,

    /* Define the compression ratio for a JPEG 2000 image created during
       Construction.  This is only applicable when using the JPEG 2000 Image
       Format. */
    AW_PREFACE_METRIC_J2K_COMPRESSION_RATIO=58,

    /* Define the compression ratio within the facial region when using ROI
       based JPEG 2000 compression in Construction. This is only applicable
       when using the JPEG 200 ROI Image Format */
    AW_PREFACE_METRIC_J2K_ROI_FOREGROUND_COMPRESSION_RATIO=59,

    /* Define the compression ratio for the background region (outside of
       the ROI) when using ROI based JPEG 2000 compression in Construction.
       This is only applicable when using the JPEG 2000 ROI Image Format. */
    AW_PREFACE_METRIC_J2K_ROI_BACKGROUND_COMPRESSION_RATIO=60,

    /* Define the acceptable format(s) for the image. The preferred value in
       a Profile defines the format of the image created during
       Construction. Supported Values are:\\1 - tif \\2 - bmp \\3 - pnm \\4
       - jpeg \\5 - jpeg 2000 \\6 - jpeg 2000 ROI \\11 - 24 bit Raw \\12 -
       PPM \\13 - PGM \\14 - PNG */
    AW_PREFACE_METRIC_IMAGE_FORMAT=61,

    /* The likelihood that the subject is wearing a mask. A score of 0
       indicates that the subject was not detected wearing a mask. A score
       of 100 indicates the subject was detected wearing a mask. */
    AW_PREFACE_METRIC_MASK_LIKELIHOOD=62,

    /* The likelihood that the subject has their mouth obscured. A score of
       0 indicates that the subject's mouth is visible. A score of 100
       indicates that the subject's mouth is obscured. */
    AW_PREFACE_METRIC_MOUTH_OBSCURED_LIKELIHOOD=63
};
typedef enum aw_preface_metric_t aw_preface_metric_t;

/* Metric unit */
enum aw_preface_metric_unit_t
{
    /* Metric unit, pixels. */
    AW_PREFACE_METRIC_UNIT_PIXELS=1,

    /* Metric unit, bits. */
    AW_PREFACE_METRIC_UNIT_BITS=2,

    /* Metric unit, degrees */
    AW_PREFACE_METRIC_UNIT_DEGREES=3,

    /* Metric unit, percent */
    AW_PREFACE_METRIC_UNIT_PERCENT=4,

    /* Metric unit, bytes */
    AW_PREFACE_METRIC_UNIT_BYTES=5,

    /* Metric unit, years old */
    AW_PREFACE_METRIC_UNIT_YEARS=6,

    /* Metric unit, no unit */
    AW_PREFACE_METRIC_UNIT_NO_UNIT=7
};
typedef enum aw_preface_metric_unit_t aw_preface_metric_unit_t;

/* Color format for pixels in the image */
enum aw_preface_color_format_t
{
    /* 8 bit greyscale. */
    AW_PREFACE_COLOR_FORMAT_GREY8=1,

    /* 24 bit color in RGB order. */
    AW_PREFACE_COLOR_FORMAT_RGB24=2,

    /* 24 bit color in BGR order. */
    AW_PREFACE_COLOR_FORMAT_BGR24=3,

    /* 32 bit color in ARGB order. */
    AW_PREFACE_COLOR_FORMAT_ARGB=4,

    /* 32 bit color in BGRA order. */
    AW_PREFACE_COLOR_FORMAT_BGRA=5,

    /* NV_21 format. */
    AW_PREFACE_COLOR_FORMAT_NV_21=6
};
typedef enum aw_preface_color_format_t aw_preface_color_format_t;

/* Image format for constructed images */
enum aw_preface_image_format_t
{
    /* Tiff format */
    AW_PREFACE_IMAGE_FORMAT_TIF=1,

    /* BMP format */
    AW_PREFACE_IMAGE_FORMAT_BMP=2,

    /* PNM format */
    AW_PREFACE_IMAGE_FORMAT_PNM=3,

    /* JPEG format */
    AW_PREFACE_IMAGE_FORMAT_JPEG=4,

    /* JPEG 2000 format */
    AW_PREFACE_IMAGE_FORMAT_J2K=5,

    /* JPEG 2000 format using ROI */
    AW_PREFACE_IMAGE_FORMAT_J2K_ROI=6,

    /* Raw RGB 24-bit image format */
    AW_PREFACE_IMAGE_FORMAT_RAW=11,

    /* PPM format */
    AW_PREFACE_IMAGE_FORMAT_PPM=12,

    /* PGM format */
    AW_PREFACE_IMAGE_FORMAT_PGM=13,

    /* PNG format */
    AW_PREFACE_IMAGE_FORMAT_PNG=14
};
typedef enum aw_preface_image_format_t aw_preface_image_format_t;

/* Data record format. */
enum aw_preface_data_record_format_t
{
    /* ISO Facial Standard 2005. */
    AW_PREFACE_DATA_RECORD_FORMAT_ISO_19794_5_2005=1,

    /* ISO Facial Standard 2011. */
    AW_PREFACE_DATA_RECORD_FORMAT_ISO_19794_5_2011=2
};
typedef enum aw_preface_data_record_format_t aw_preface_data_record_format_t;

/* Metrics categories */
enum aw_preface_metrics_category_t
{
    /* These metrics provide information related to facial characteristics
       of an image.                              These metrics are not
       modified by scaling and/or cropping the image in PreFace. */
    AW_PREFACE_METRICS_CATEGORY_FACE_CHARACTERISTICS=0,

    /* These metrics provide information related to eye characteristics of
       an image.                              These metrics are not modified
       by scaling and/or cropping the image in PreFace. */
    AW_PREFACE_METRICS_CATEGORY_EYE_CHARACTERISTICS=1,

    /* These metrics provide information related to global information about
       the image, as well as the background of the image outside the head
       region.                              These metrics may be modified by
       scaling and/or cropping the image in PreFace, or by specific profiles
       used in PreFace. */
    AW_PREFACE_METRICS_CATEGORY_IMAGE_CHARACTERISTICS=2,

    /* These metrics provide information related to external factors that
       may negatively affect facial recognition.                            
       These metrics are  not modified by scaling and/or cropping an image
       in PreFace. */
    AW_PREFACE_METRICS_CATEGORY_ANOMALIES=3,

    /* These metrics provide information related to the geometry of the head
       region and the image.                              They can be
       modified by scaling and/or cropping the image in PreFace.            
                        These metrics can be specified and/or constrained in
       a profile to either check image compliance or to enable construction
       of a compliant (cropped and/or scaled) version of the image to meet
       profile requirements. */
    AW_PREFACE_METRICS_CATEGORY_IMAGE_GEOMETRY=4,

    /* These metrics provide information related to demographics of the
       subject in an image. */
    AW_PREFACE_METRICS_CATEGORY_DEMOGRAPHICS=5,

    /* These metrics provide information related to the storage of an image.
                                    The value for these metrics in a profile
       can control the format in which the image is stored.                 
                   It is not possible to determine the JPEG Quality level of
       an input image.                              All other metrics listed
       in this category may be determined for an input image. */
    AW_PREFACE_METRICS_CATEGORY_IMAGE_STORAGE=6
};
typedef enum aw_preface_metrics_category_t aw_preface_metrics_category_t;

/* Profile metric constraints types */
enum aw_preface_metric_constraint_t
{
    /* The preferred value for the specified Metric. */
    AW_PREFACE_METRIC_CONSTRAINT_PREFERRED=1,

    /* The minimum value for the Metric to be considered Compliant. */
    AW_PREFACE_METRIC_CONSTRAINT_MIN=2,

    /* The maximum value for the Metric to be considered Compliant. */
    AW_PREFACE_METRIC_CONSTRAINT_MAX=3,

    /* The smallest value that the min, max, and preferred values can be set
       to for this Metric. */
    AW_PREFACE_METRIC_CONSTRAINT_ALLOWED_MIN=4,

    /* The largest value that the min, max, and preferred values can be set
       to for this Metric. */
    AW_PREFACE_METRIC_CONSTRAINT_ALLOWED_MAX=5,

    /* The proportional weight contribution of this metric to the Face's
       Compliance score. */
    AW_PREFACE_METRIC_CONSTRAINT_Q_WEIGHT=6,

    /* The minimum value for the Metric to be corrected during Construction. */
    AW_PREFACE_METRIC_CONSTRAINT_CMIN=7,

    /* The maximum value for the Metric to be corrected during Construction. */
    AW_PREFACE_METRIC_CONSTRAINT_CMAX=8
};
typedef enum aw_preface_metric_constraint_t aw_preface_metric_constraint_t;

/* Select in what order faces are detected. */
enum aw_preface_face_detection_mode_t
{
    /* Order faces based on size. (Default) */
    AW_PREFACE_FACE_DETECTION_MODE_FACE_ORDERING_BY_SIZE=0,

    /* Order faces based on face size. */
    AW_PREFACE_FACE_DETECTION_MODE_FACE_ORDERING_BY_SCORE=1,

    /* Find a single face with the largest size. */
    AW_PREFACE_FACE_DETECTION_MODE_DOMINANT_FACE_BY_SIZE=2,

    /* Find a single face with the highest face score. */
    AW_PREFACE_FACE_DETECTION_MODE_DOMINANT_FACE_BY_SCORE=3,

    /* Find a single face in the image.  A more thorough search is performed
       in order to detect difficult to find faces.  It is assumed that there
       is one face within the image. */
    AW_PREFACE_FACE_DETECTION_MODE_PASSPORT_FACE=4
};
typedef enum aw_preface_face_detection_mode_t aw_preface_face_detection_mode_t;

/* Profile validation errors. */
enum aw_preface_profile_error_t
{
    /* EYE SEPARATION constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_EYE_SEPARATION_INVALID=0,

    /* EYE AXIS ANGLE constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_EYE_AXIS_ANGLE_INVALID=1,

    /* EYE AXIS ANGLE constraint must be fully constrained or fully
       unconstrained. */
    AW_PREFACE_PROFILE_ERROR_EYE_AXIS_ANGLE_PARTIALLY_CONSTRAINED=3,

    /* HEAD HEIGHT TO IMAGE HEIGHT RATIO constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_HEAD_HEIGHT_TO_IMAGE_HEIGHT_RATIO_INVALID=4,

    /* HEAD HEIGHT TO IMAGE HEIGHT RATIO must be constrained. */
    AW_PREFACE_PROFILE_ERROR_HEAD_HEIGHT_TO_IMAGE_HEIGHT_RATIO_UNCONSTRAINED=5,

    /* IMAGE WIDTH TO HEAD WIDTH RATIO constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_IMAGE_WIDTH_TO_HEAD_WIDTH_RATIO_INVALID=6,

    /* IMAGE WIDTH TO HEAD WIDTH RATIO must be fully constrained. */
    AW_PREFACE_PROFILE_ERROR_IMAGE_WIDTH_TO_HEAD_WIDTH_RATIO_PARTIALLY_CONSTRAINED=8,

    /* EYE AXIS LOCATION RATIO constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_EYE_AXIS_LOCATION_RATIO_INVALID=9,

    /* EYE AXIS LOCATION RATIO must be fully constrained. */
    AW_PREFACE_PROFILE_ERROR_EYE_AXIS_LOCATION_RATIO_PARTIALLY_CONSTRAINED=11,

    /* CENTERLINE LOCATION RATIO constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_CENTERLINE_LOCATION_RATIO_INVALID=12,

    /* CENTERLINE LOCATION RATIO must be fully constrained. */
    AW_PREFACE_PROFILE_ERROR_CENTERLINE_LOCATION_RATIO_PARTIALLY_CONSTRAINED=14,

    /* BACKGROUND PAD TYPE constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_BACKGROUND_PAD_TYPE_INVALID=15,

    /* JPEG QUALITY LEVEL constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_JPEG_QUALITY_LEVEL_INVALID=18,

    /* JPEG QUALITY LEVEL must be fully constrained. */
    AW_PREFACE_PROFILE_ERROR_JPEG_QUALITY_LEVEL_NOT_FULLY_CONSTRAINED=20,

    /* J2K ROI FOREGROUND COMPRESSION RATIO constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_J2K_ROI_FOREGROUND_COMPRESSION_RATIO_INVALID=21,

    /* J2K ROI FOREGROUND COMPRESSION RATIO must be constrained. */
    AW_PREFACE_PROFILE_ERROR_J2K_ROI_FOREGROUND_COMPRESSION_RATIO_UNCONSTRAINED=22,

    /* J2K ROI FOREGROUND COMPRESSION RATIO must be fully constrained. */
    AW_PREFACE_PROFILE_ERROR_J2K_ROI_FOREGROUND_COMPRESSION_RATIO_PARTIALLY_CONSTRAINED=23,

    /* J2K ROI BACKGROUND COMPRESSION RATIO constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_J2K_ROI_BACKGROUND_COMPRESSION_RATIO_INVALID=24,

    /* J2K ROI BACKGROUND COMPRESSION RATIO must be constrained. */
    AW_PREFACE_PROFILE_ERROR_J2K_ROI_BACKGROUND_COMPRESSION_RATIO_UNCONSTRAINED=25,

    /* J2K ROI BACKGROUND COMPRESSION RATIO must be fully constrained. */
    AW_PREFACE_PROFILE_ERROR_J2K_ROI_BACKGROUND_COMPRESSION_RATIO_PARTIALLY_CONSTRAINED=27,

    /* IMAGE FORMAT constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_IMAGE_FORMAT_INVALID=28,

    /* IMAGE FORMAT must be fully constrained. */
    AW_PREFACE_PROFILE_ERROR_IMAGE_FORMAT_PARTIALLY_CONSTRAINED=30,

    /* FILE SIZE constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_FILE_SIZE_INVALID=31,

    /* FILE SIZE must be constrained. */
    AW_PREFACE_PROFILE_ERROR_FILE_SIZE_UNCONSTRAINED=32,

    /* FILE SIZE must be unconstrained. */
    AW_PREFACE_PROFILE_ERROR_FILE_SIZE_CONSTRAINED=33,

    /* J2K COMPRESSION RATIO constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_J2K_COMPRESSION_RATIO_INVALID=34,

    /* J2K COMPRESSION RATIO must be fully constrained. */
    AW_PREFACE_PROFILE_ERROR_J2K_COMPRESSION_RATIO_PARTIALLY_CONSTRAINED=36,

    /* One of either FILE SIZE or J2K COMPRESSION RATIO must be
       unconstrained. */
    AW_PREFACE_PROFILE_ERROR_FILE_SIZE_AND_J2K_COMPRESSION_RATIO_BOTH_CONSTRAINED=37,

    /* Only one of either FILE SIZE or J2K COMPRESSION RATIO must be
       unconstrained. */
    AW_PREFACE_PROFILE_ERROR_FILE_SIZE_AND_J2K_COMPRESSION_RATIO_BOTH_UNCONSTRAINED=38,

    /* HEIGHT TO WIDTH RATIO constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_HEIGHT_TO_WIDTH_RATIO_INVALID=39,

    /* IMAGE WIDTH constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_IMAGE_WIDTH_INVALID=40,

    /* IMAGE HEIGHT constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_IMAGE_HEIGHT_INVALID=41,

    /* At least one of HEIGHT TO WIDTH RATIO, IMAGE WIDTH or IMAGE HEIGHT
       (but not all) must be constrained. */
    AW_PREFACE_PROFILE_ERROR_GEOMETRY_UNDER_CONSTRAINED=42,

    /* At most two of HEIGHT TO WIDTH RATIO, IMAGE WIDTH or IMAGE HEIGHT can
       be constrained. */
    AW_PREFACE_PROFILE_ERROR_GEOMETRY_OVER_CONSTRAINED=43,

    /* NUMBER OF CHANNELS constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_NUMBER_OF_CHANNELS_INVALID=44,

    /* CONDITIONAL PADDING constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_CONDITIONAL_PADDING_INVALID=45,

    /* DEGREE OF CLUTTER constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_DEGREE_OF_CLUTTER_INVALID=46,

    /* BACKGROUND TYPE constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_BACKGROUND_TYPE_INVALID=47,

    /* PERCENT BACKGROUND GRAY constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_PERCENT_BACKGROUND_GRAY_INVALID=48,

    /* PERCENT BACKGROUND UNIFORMITY constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_PERCENT_BACKGROUND_UNIFORMITY_INVALID=49,

    /* FACIAL DYNAMIC RANGE constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_FACIAL_DYNAMIC_RANGE_INVALID=50,

    /* PERCENT FACIAL BRIGHTNESS constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_PERCENT_FACIAL_BRIGHTNESS_INVALID=51,

    /* PERCENT FACIAL SATURATION constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_PERCENT_FACIAL_SATURATION_INVALID=52,

    /* BRIGHTNESS SCORE constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_BRIGHTNESS_SCORE_INVALID=53,

    /* DEGREE OF BLUR constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_FOCUS_LIKELIHOOD_INVALID=55,

    /* SMILE LIKELIHOOD constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_SMILE_LIKELIHOOD_INVALID=56,

    /* ESTIMATED AGE constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_ESTIMATED_AGE_INVALID=57,

    /* AGE CHILD CONFIDENCE constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_AGE_CHILD_CONFIDENCE_INVALID=58,

    /* AGE YOUTH CONFIDENCE constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_AGE_YOUTH_CONFIDENCE_INVALID=59,

    /* AGE ADULT CONFIDENCE constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_AGE_ADULT_CONFIDENCE_INVALID=60,

    /* AGE SENIOR CONFIDENCE constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_AGE_SENIOR_CONFIDENCE_INVALID=61,

    /* MALE CONFIDENCE constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_MALE_CONFIDENCE_INVALID=62,

    /* FEMALE CONFIDENCE constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_FEMALE_CONFIDENCE_INVALID=63,

    /* CAUCASIAN CONFIDENCE constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_CAUCASIAN_CONFIDENCE_INVALID=64,

    /* AFRICAN AMERICAN CONFIDENCE constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_AFRICAN_AMERICAN_CONFIDENCE_INVALID=65,

    /* ASIAN CONFIDENCE constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_ASIAN_CONFIDENCE_INVALID=66,

    /* POSE ANGLE YAW constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_POSE_ANGLE_YAW_INVALID=67,

    /* POSE ANGLE PITCH constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_POSE_ANGLE_PITCH_INVALID=68,

    /* DEGREE OF ILLUMINATION ASYMMETRY constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_DEGREE_OF_ILLUMINATION_ASYMMETRY_INVALID=69,

    /* SHADOW LIKELIHOOD constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_SHADOW_LIKELIHOOD_INVALID=70,

    /* LEFT EYE CLOSED constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_LEFT_EYE_CLOSED_INVALID=71,

    /* RIGHT EYE CLOSED constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_RIGHT_EYE_CLOSED_INVALID=72,

    /* LEFT EYE VALID constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_LEFT_EYE_VALID_INVALID=73,

    /* RIGHT EYE VALID constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_RIGHT_EYE_VALID_INVALID=74,

    /* LEFT EYE COVERED BY FRAMES LIKELIHOOD constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_LEFT_EYE_COVERED_BY_FRAMES_LIKELIHOOD_INVALID=75,

    /* RIGHT EYE COVERED BY FRAMES LIKELIHOOD constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_RIGHT_EYE_COVERED_BY_FRAMES_LIKELIHOOD_INVALID=76,

    /* LEFT EYE COVERED BY HAIR LIKELIHOOD constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_LEFT_EYE_COVERED_BY_HAIR_LIKELIHOOD_INVALID=77,

    /* RIGHT EYE COVERED BY HAIR LIKELIHOOD constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_RIGHT_EYE_COVERED_BY_HAIR_LIKELIHOOD_INVALID=78,

    /* GLASSES LIKELIHOOD constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_GLASSES_LIKELIHOOD_INVALID=79,

    /* DARK GLASSES LIKELIHOOD constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_DARK_GLASSES_LIKELIHOOD_INVALID=80,

    /* GLARE LIKELIHOOD constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_GLARE_LIKELIHOOD_INVALID=81,

    /* HEAVY FRAMES constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_HEAVY_FRAMES_INVALID=82,

    /* EYE CONTRAST constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_EYE_CONTRAST_INVALID=83,

    /* CORRECTABLE FACIAL DYNAMIC RANGE constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_CORRECTABLE_FACIAL_DYNAMIC_RANGE_INVALID=97,

    /* CORRECTABLE FACIAL BRIGHTNESS constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_CORRECTABLE_FACIAL_BRIGHTNESS_INVALID=98,

    /* CORRECTABLE EYE CONTRAST constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_CORRECTABLE_EYE_CONTRAST_INVALID=99,

    /* CORRECTABLE BRIGHTNESS SCORE constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_CORRECTABLE_BRIGHTNESS_SCORE_INVALID=100,

    /* CORRECTABLE EYE AXIS ANGLE constraint is invalid. */
    AW_PREFACE_PROFILE_ERROR_CORRECTABLE_EYE_AXIS_ANGLE_INVALID=101,

    /* Profile contains too few geometrical constraints.  Profiles must
       contain at least two of the following Metrics : Image Width, Image
       Height, Height to Width Ratio, and Eye Separation.  A Profile cannot
       contain all three of Image Width, Image Height, and Height to Width
       Ratio or it will be over constrained. */
    AW_PREFACE_PROFILE_ERROR_TOO_FEW_GEOMETRIC_CONSTRAINTS=102,

    /* IMAGE WIDTH constraint has values outside of the allowable range */
    AW_PREFACE_PROFILE_ERROR_IMAGE_WIDTH_OUT_OF_RANGE=104,

    /* IMAGE HEIGHT constraint has values outside of the allowable range */
    AW_PREFACE_PROFILE_ERROR_IMAGE_HEIGHT_OUT_OF_RANGE=105,

    /* NUMBER OF CHANNELS constraint has values outside of the allowable
       range */
    AW_PREFACE_PROFILE_ERROR_NUMBER_OF_CHANNELS_OUT_OF_RANGE=106,

    /* EYE SEPARATION constraint has values outside of the allowable range */
    AW_PREFACE_PROFILE_ERROR_EYE_SEPARATION_OUT_OF_RANGE=107,

    /* EYE AXIS LOCATION RATIO constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_EYE_AXIS_LOCATION_RATIO_OUT_OF_RANGE=108,

    /* CENTERLINE LOCATION RATIO constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_CENTERLINE_LOCATION_RATIO_OUT_OF_RANGE=109,

    /* HEAD HEIGHT TO IMAGE HEIGHT RATIO constraint has values outside of
       the allowable range */
    AW_PREFACE_PROFILE_ERROR_HEAD_HEIGHT_TO_IMAGE_HEIGHT_RATIO_OUT_OF_RANGE=110,

    /* IMAGE WIDTH TO HEAD WIDTH RATIO constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_IMAGE_WIDTH_TO_HEAD_WIDTH_RATIO_OUT_OF_RANGE=111,

    /* HEIGHT TO WIDTH RATIO constraint has values outside of the allowable
       range */
    AW_PREFACE_PROFILE_ERROR_HEIGHT_TO_WIDTH_RATIO_OUT_OF_RANGE=112,

    /* POSE ANGLE YAW constraint has values outside of the allowable range */
    AW_PREFACE_PROFILE_ERROR_POSE_ANGLE_YAW_OUT_OF_RANGE=113,

    /* POSE ANGLE PITCH constraint has values outside of the allowable range */
    AW_PREFACE_PROFILE_ERROR_POSE_ANGLE_PITCH_OUT_OF_RANGE=114,

    /* DEGREE OF ILLUMINATION ASYMMETRY constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_DEGREE_OF_ILLUMINATION_OUT_OF_RANGE=115,

    /* FACIAL DYNAMIC RANGE constraint has values outside of the allowable
       range */
    AW_PREFACE_PROFILE_ERROR_FACIAL_DYNAMIC_RANGE_OUT_OF_RANGE=116,

    /* PERCENT FACIAL BRIGHTNESS constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_PERCENT_FACIAL_BRIGHTNESS_OUT_OF_RANGE=117,

    /* BRIGHTNESS SCORE constraint has values outside of the allowable range */
    AW_PREFACE_PROFILE_ERROR_BRIGHTNESS_SCORE_OUT_OF_RANGE=118,

    /* PERCENT FACIAL SATURATION constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_PERCENT_FACIAL_SATURATION_OUT_OF_RANGE=119,

    /* SMILE LIKELIHOOD constraint has values outside of the allowable range */
    AW_PREFACE_PROFILE_ERROR_SMILE_LIKELIHOOD_OUT_OF_RANGE=120,

    /* SHADOW LIKELIHOOD constraint has values outside of the allowable
       range */
    AW_PREFACE_PROFILE_ERROR_SHADOW_LIKELIHOOD_OUT_OF_RANGE=121,

    /* SHARPNESS LIKELIHOOD constraint has values outside of the allowable
       range */
    AW_PREFACE_PROFILE_ERROR_SHARPNESS_LIKELIHOOD_OUT_OF_RANGE=122,

    /* UNNATURAL COLOR LIKELIHOOD constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_UNNATURAL_COLOR_LIKELIHOOD_OUT_OF_RANGE=123,

    /* EYE AXIS ANGLE constraint has values outside of the allowable range */
    AW_PREFACE_PROFILE_ERROR_EYE_AXIS_ANGLE_OUT_OF_RANGE=124,

    /* EYE CONTRAST constraint has values outside of the allowable range */
    AW_PREFACE_PROFILE_ERROR_EYE_CONTRAST_OUT_OF_RANGE=125,

    /* GLASSES LIKELIHOOD constraint has values outside of the allowable
       range */
    AW_PREFACE_PROFILE_ERROR_GLASSES_LIKELIHOOD_OUT_OF_RANGE=126,

    /* DARK GLASSES LIKELIHOOD constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_DARK_GLASSES_LIKELIHOOD_OUT_OF_RANGE=127,

    /* HEAVY FRAMES LIKELIHOOD constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_HEAVY_FRAMES_LIKELIHOOD_OUT_OF_RANGE=128,

    /* Glare LIKELIHOOD constraint has values outside of the allowable range */
    AW_PREFACE_PROFILE_ERROR_GLARE_LIKELIHOOD_OUT_OF_RANGE=129,

    /* FRAME COVERED RIGHT EYE LIKELIHOOD constraint has values outside of
       the allowable range */
    AW_PREFACE_PROFILE_ERROR_FRAME_COVERED_RIGHT_EYE_LIKELIHOOD_OUT_OF_RANGE=130,

    /* HAIR COVERED RIGHT EYE LIKELIHOOD constraint has values outside of
       the allowable range */
    AW_PREFACE_PROFILE_ERROR_HAIR_COVERED_RIGHT_EYE_LIKELIHOOD_OUT_OF_RANGE=131,

    /* DEGREE OF RIGHT EYE CLOSED constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_DEGREE_OF_RIGHT_EYE_CLOSED_OUT_OF_RANGE=132,

    /* DEGREE OF RIGHT EYE VALID constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_DEGREE_OF_RIGHT_EYE_VALID_OUT_OF_RANGE=133,

    /* FRAME COVERED LEFT EYE LIKELIHOOD constraint has values outside of
       the allowable range */
    AW_PREFACE_PROFILE_ERROR_FRAME_COVERED_LEFT_EYE_LIKELIHOOD_OUT_OF_RANGE=134,

    /* HAIR COVERED LEFT EYE LIKELIHOOD constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_HAIR_COVERED_LEFT_EYE_LIKELIHOOD_OUT_OF_RANGE=135,

    /* DEGREE OF LEFT EYE CLOSED constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_DEGREE_OF_LEFT_EYE_CLOSED_OUT_OF_RANGE=136,

    /* DEGREE OF LEFT EYE VALID constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_DEGREE_OF_LEFT_EYE_VALID_OUT_OF_RANGE=137,

    /* OFF ANGLE GAZE LIKELIHOOD constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_OFF_ANGLE_GAZE_LIKELIHOOD_OUT_OF_RANGE=138,

    /* RED EYE LIKELIHOOD constraint has values outside of the allowable
       range */
    AW_PREFACE_PROFILE_ERROR_RED_EYE_LIKELIHOOD_OUT_OF_RANGE=139,

    /* FOREHEAD COVERING LIKELIHOOD constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_FOREHEAD_COVERING_LIKELIHOOD_OUT_OF_RANGE=140,

    /* ESTIMATED AGE constraint has values outside of the allowable range */
    AW_PREFACE_PROFILE_ERROR_ESTIMATED_AGE_OUT_OF_RANGE=141,

    /* AGE CHILD CONFIDENCE constraint has values outside of the allowable
       range */
    AW_PREFACE_PROFILE_ERROR_AGE_CHILD_CONFIDENCE_OUT_OF_RANGE=142,

    /* AGE YOUTH CONFIDENCE constraint has values outside of the allowable
       range */
    AW_PREFACE_PROFILE_ERROR_AGE_YOUTH_CONFIDENCE_OUT_OF_RANGE=143,

    /* AGE ADULT CONFIDENCE constraint has values outside of the allowable
       range */
    AW_PREFACE_PROFILE_ERROR_AGE_ADULT_CONFIDENCE_OUT_OF_RANGE=144,

    /* AGE SENIOR CONFIDENCE constraint has values outside of the allowable
       range */
    AW_PREFACE_PROFILE_ERROR_AGE_SENIOR_CONFIDENCE_OUT_OF_RANGE=145,

    /* MALE CONFIDENCE constraint has values outside of the allowable range */
    AW_PREFACE_PROFILE_ERROR_MALE_CONFIDENCE_OUT_OF_RANGE=146,

    /* FEMALE CONFIDENCE constraint has values outside of the allowable
       range */
    AW_PREFACE_PROFILE_ERROR_FEMALE_CONFIDENCE_OUT_OF_RANGE=147,

    /* CAUCASIAN CONFIDENCE constraint has values outside of the allowable
       range */
    AW_PREFACE_PROFILE_ERROR_CAUCASIAN_CONFIDENCE_OUT_OF_RANGE=148,

    /* AFRICAN AMERICAN CONFIDENCE constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_AFRICAN_AMERICAN_CONFIDENCE_OUT_OF_RANGE=149,

    /* ASIAN CONFIDENCE constraint has values outside of the allowable range */
    AW_PREFACE_PROFILE_ERROR_ASIAN_CONFIDENCE_OUT_OF_RANGE=150,

    /* PERCENT BACKGROUND GRAY constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_PERCENT_BACKGROUND_GRAY_OUT_OF_RANGE=151,

    /* PERCENT BACKGROUND UNIFORMITY constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_PERCENT_BACKGROUND_UNIFORMITY_OUT_OF_RANGE=152,

    /* DEGREE OF CLUTTER constraint has values outside of the allowable
       range */
    AW_PREFACE_PROFILE_ERROR_DEGREE_OF_CLUTTER_OUT_OF_RANGE=153,

    /* BACKGROUND TYPE constraint has values outside of the allowable range */
    AW_PREFACE_PROFILE_ERROR_BACKGROUND_TYPE_OUT_OF_RANGE=154,

    /* PERCENT COLOR BALANCED constraint has values outside of the allowable
       range */
    AW_PREFACE_PROFILE_ERROR_PERCENT_COLOR_BALANCED_OUT_OF_RANGE=155,

    /* BACKGROUND PAD TYPE constraint has values outside of the allowable
       range */
    AW_PREFACE_PROFILE_ERROR_BACKGROUND_PAD_TYPE_OUT_OF_RANGE=156,

    /* CONDITIONAL PADDING constraint has values outside of the allowable
       range */
    AW_PREFACE_PROFILE_ERROR_CONDITIONAL_PADDING_OUT_OF_RANGE=157,

    /* JPEG QUALITY LEVEL constraint has values outside of the allowable
       range */
    AW_PREFACE_PROFILE_ERROR_JPEG_QUALITY_LEVEL_OUT_OF_RANGE=158,

    /* J2K ROI FOREGROUND COMPRESSION RATIO constraint has values outside of
       the allowable range */
    AW_PREFACE_PROFILE_ERROR_J2K_ROI_FOREGROUND_COMPRESSION_RATIO_OUT_OF_RANGE=159,

    /* J2K ROI BACKGROUND COMPRESSION RATIO constraint has values outside of
       the allowable range */
    AW_PREFACE_PROFILE_ERROR_J2K_ROI_BACKGROUND_COMPRESSION_RATIO_OUT_OF_RANGE=160,

    /* IMAGE FORMAT constraint has values outside of the allowable range */
    AW_PREFACE_PROFILE_ERROR_IMAGE_FORMAT_OUT_OF_RANGE=161,

    /* FILE SIZE constraint has values outside of the allowable range */
    AW_PREFACE_PROFILE_ERROR_FILE_SIZE_OUT_OF_RANGE=162,

    /* CORRECTABLE EYE AXIS ANGLE constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_CORRECTABLE_EYE_AXIS_ANGLE_OUT_OF_RANGE=163,

    /* CORRECTABLE FACIAL DYNAMIC RANGE constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_CORRECTABLE_FACIAL_DYNAMIC_RANGE_OUT_OF_RANGE=164,

    /* CORRECTABLE PERCENT FACIAL BRIGHTNESS constraint has values outside
       of the allowable range */
    AW_PREFACE_PROFILE_ERROR_CORRECTABLE_PERCENT_FACIAL_BRIGHTNESS_OUT_OF_RANGE=165,

    /* CORRECTABLE EYE CONTRAST constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_CORRECTABLE_EYE_CONTRAST_OUT_OF_RANGE=166,

    /* CORRECTABLE BRIGHTNESS SCORE constraint has values outside of the
       allowable range */
    AW_PREFACE_PROFILE_ERROR_CORRECTABLE_BRIGHTNESS_SCORE_OUT_OF_RANGE=167,

    /* MASK LIKELIHOOD constraint is invalid */
    AW_PREFACE_PROFILE_ERROR_MASK_LIKELIHOOD_INVALID=179,

    /* BACKGROUND PAD TYPE must be fully constrained or fully unconstrained. */
    AW_PREFACE_PROFILE_ERROR_BACKGROUND_PAD_TYPE_PARTIALLY_CONSTRAINED=180,

    /* MOUTH OBSCURED LIKELIHOOD value is invalid. */
    AW_PREFACE_PROFILE_ERROR_MOUTH_OBSCURED_LIKELIHOOD_INVALID=181,

    /* MOUTH OBSCURED LIKELIHOOD constraint has values outside of the
       allowable range. */
    AW_PREFACE_PROFILE_ERROR_MOUTH_OBSCURED_LIKELIHOOD_OUT_OF_RANGE=182
};
typedef enum aw_preface_profile_error_t aw_preface_profile_error_t;

/* Image storage properties.  These only affect the images retrieved
   directly from the PreFace library, not from Face objects. */
enum aw_preface_image_property_t
{
    /* Specify the desired JPEG quality level when getting a JPEG image. 
       Valid values range from 1 to 100. */
    AW_PREFACE_IMAGE_PROPERTY_JPEG_QUALITY_LEVEL=1,

    /* Specify the desired J2K Compression Ratio when getting a J2K image. 
       If a FILE_SIZE has been specified, the FILE_SIZE will be discarded. 
       Valid values from 1.0 to 10000.0. */
    AW_PREFACE_IMAGE_PROPERTY_J2K_COMPRESSION_RATIO=2,

    /* Specify the desired File Size when getting a J2K in bytes.  If a
       J2K_COMPRESSION_RATIO has been specifed, the J2K_COMPRESSION_RATIO
       will be discarded.  Valid values are greater than 0.0. */
    AW_PREFACE_IMAGE_PROPERTY_FILE_SIZE=3
};
typedef enum aw_preface_image_property_t aw_preface_image_property_t;

struct aw_preface_face_t;
typedef struct aw_preface_face_t aw_preface_face_t;

struct aw_preface_profile_t;
typedef struct aw_preface_profile_t aw_preface_profile_t;

/* Library Management */

/* <Function> aw_preface_create
   <Description> This function creates the Preface object.
   <Return Value>
     Pointer to an Preface object, null if the object could not be allocated.
    */
AW_PREFACE_DECLARE(aw_preface_t*) aw_preface_create();

/* <Function> aw_preface_destroy
   <Description> This function destroys the Preface object.
   <Parameters>
     aw_preface - Library object pointer.
   <Return Value>
     None
    */
AW_PREFACE_DECLARE(void) aw_preface_destroy(
  aw_preface_t* aw_preface
);

/* <Function> aw_preface_set_classifier_data_file
   <Description> Required call before PreFace can be initialized.  Specifies
   the location of the Classifier Data File.  This function can
   only be called once per process.
   <Parameters>
     file_name - File name for classifier file.  Specify the value 'legacy' to
                 disable loading a file but operate with slower performance
                 and decreased accuracy.
   <Return Value>
     PreFace error code.
    */
AW_PREFACE_DECLARE(aw_int32_t) aw_preface_set_classifier_data_file(
  const aw_char_t* file_name
);

/* <Function> aw_preface_init_classifier_pool
   <Description> Creates or destroys classifiers to bring the total number of
   classifiers to the specified amount.  If classifiers are
   being actively used, they will not be deleted by this
   function.
   <Parameters>
     number_of_classifiers - Number of classifiers to initialize.  Should be
                             equal to the number of threads that will be using
                             Preface objects.  The Video library uses a
                             minimum of 2.
   <Return Value>
     Preface error code.
    */
AW_PREFACE_DECLARE(aw_int32_t) aw_preface_init_classifier_pool(
  aw_int32_t number_of_classifiers
);

/* <Function> aw_preface_clear_classifier_pool
   <Description> Destroy all classifiers.  If classifiers are currently being
   used, they will be destroyed rather than returned to the pool
   to be reused.
   <Return Value>
     Preface error code.
    */
AW_PREFACE_DECLARE(aw_int32_t) aw_preface_clear_classifier_pool();

/* Image Functions */

/* <Function> aw_preface_set_image_raw
   <Description> Specify a raw image to use.
   <Parameters>
     aw_preface - Library object pointer.
     image - The image to use.
     image_size - Size of The image to use.
     color_format - Color format for the image.
     width - Width of the raw image.
     height - Height of the raw mage.
     stride - Number of bytes between row starts.
     rotation_angle - Rotate image to desired angle, which can only be 0, 90,
                      180, or 270 clockwise.
   <Return Value>
     Bytes read on success, or -1 on error.
    */
AW_PREFACE_DECLARE(aw_int32_t) aw_preface_set_image_raw(
  aw_preface_t* aw_preface,
  aw_uint8_t* image,
  size_t image_size,
  aw_preface_color_format_t color_format,
  aw_uint32_t width,
  aw_uint32_t height,
  aw_uint32_t stride,
  aw_double_t rotation_angle
);

/* <Function> aw_preface_set_image_formatted
   <Description> Specify the image to use.
   <Parameters>
     aw_preface - Library object pointer.
     image - the image to use.
     image_size - Size of the image to use.
     rotation_angle - Rotate image to desired angle, which can only be 0, 90,
                      180, or 270 clockwise.
   <Return Value>
     Bytes read on success, or -1 on error.
    */
AW_PREFACE_DECLARE(aw_int32_t) aw_preface_set_image_formatted(
  aw_preface_t* aw_preface,
  aw_uint8_t* image,
  size_t image_size,
  aw_double_t rotation_angle
);

/* <Function> aw_preface_get_image_formatted
   <Description> Get formatted image.
   <Parameters>
     aw_preface - Library object pointer.
     image_format - image format
     mirror - whether image is to be mirrored or not
     image_size - Size of The formatted image buffer.
   <Return Value>
     The formatted image buffer.
    */
AW_PREFACE_DECLARE(aw_uint8_t*) aw_preface_get_image_formatted(
  aw_preface_t* aw_preface,
  aw_preface_image_format_t image_format,
  aw_bool_t mirror,
  size_t* image_size
);

/* <Function> aw_preface_set_image_property
   <Description> Set a non-default property for getting a formatted image from
   PreFace.  Note that some properties override or reset other
   properties when set.  Please see the IMAGE_PROPERTY
   enumeration for details.  These properties only affect images
   retrieved from the get_image_formatted PreFace call.  Images
   retrieved from Face objects will not be affected by these
   properties.
   <Parameters>
     aw_preface - Library object pointer.
     image_property - Image property to set for retrieving specific types of
                      images.
     value - New value for image property.
   <Return Value>
     Error code.
    */
AW_PREFACE_DECLARE(aw_int32_t) aw_preface_set_image_property(
  aw_preface_t* aw_preface,
  aw_preface_image_property_t image_property,
  aw_double_t value
);

/* Analysis */

/* <Function> aw_preface_get_metric_unit
   <Description> Returns an enumeration number for the unit of the metric.
   <Parameters>
     aw_preface - Library object pointer.
     metric - Image metric.
   <Return Value>
     An enumeration number for image metric unit.
    */
AW_PREFACE_DECLARE(aw_preface_metric_unit_t) aw_preface_get_metric_unit(
  aw_preface_t* aw_preface,
  aw_preface_metric_t metric
);

/* <Function> aw_preface_get_metric_minimum
   <Description> Returns the minimum value allowed for the specified metric.
   <Parameters>
     aw_preface - Library object pointer.
     metric - Image metric.
   <Return Value>
     Allowed minimum value for image metric.
    */
AW_PREFACE_DECLARE(aw_double_t) aw_preface_get_metric_minimum(
  aw_preface_t* aw_preface,
  aw_preface_metric_t metric
);

/* <Function> aw_preface_get_metric_maximum
   <Description> Returns the maximum value allowed for the specified metric.
   <Parameters>
     aw_preface - Library object pointer.
     metric - Image metric.
   <Return Value>
     Allowed maximum value for image metric.
    */
AW_PREFACE_DECLARE(aw_double_t) aw_preface_get_metric_maximum(
  aw_preface_t* aw_preface,
  aw_preface_metric_t metric
);

/* <Function> aw_preface_get_metric_correctable_minimum
   <Description> Returns the correctable allowed minimum value for the metric.
   There are five correctable metrics, including facial dynamic
   range, percent facial brightness, brightness score, eye
   constrast, and eye axis angle.
   <Parameters>
     aw_preface - Library object pointer.
     metric - Image metric.
   <Return Value>
     Correctable allowed minimum value for image metric.
    */
AW_PREFACE_DECLARE(aw_double_t) aw_preface_get_metric_correctable_minimum(
  aw_preface_t* aw_preface,
  aw_preface_metric_t metric
);

/* <Function> aw_preface_get_metric_correctable_maximum
   <Description> Returns the correctable allowed maximum value for the metric.
   There are five correctable metrics, including facial dynamic
   range, percent facial brightness, brightness score, eye
   constrast, and eye axis angle.
   <Parameters>
     aw_preface - Library object pointer.
     metric - Image metric.
   <Return Value>
     Correctable allowed maximum value for image metric.
    */
AW_PREFACE_DECLARE(aw_double_t) aw_preface_get_metric_correctable_maximum(
  aw_preface_t* aw_preface,
  aw_preface_metric_t metric
);

/* <Function> aw_preface_get_category_metrics
   <Description> Returns pointer to an array of enumerations of metrics for
   the specified category.
   <Parameters>
     aw_preface - Library object pointer.
     metrics_category - Image metrics category.
     metrics_size - Size of Metrics enumerations for the specified category
   <Return Value>
     Metrics enumerations for the specified category
    */
AW_PREFACE_DECLARE(aw_preface_metric_t*) aw_preface_get_category_metrics(
  aw_preface_t* aw_preface,
  aw_preface_metrics_category_t metrics_category,
  size_t* metrics_size
);

/* <Function> aw_preface_get_face_detection_min_size
   <Description> Get the current face detection minimum search size.
   <Parameters>
     aw_preface - Library object pointer.
   <Return Value>
     Value on (0, 1.0] indicating the minimum size of face to search for.
    */
AW_PREFACE_DECLARE(aw_double_t) aw_preface_get_face_detection_min_size(
  aw_preface_t* aw_preface
);

/* <Function> aw_preface_get_face_detection_max_size
   <Description> Get the current face detection maximum search size.
   <Parameters>
     aw_preface - Library object pointer.
   <Return Value>
     Value on (0, 1.0] indicating the maximum size of face to search for.
    */
AW_PREFACE_DECLARE(aw_double_t) aw_preface_get_face_detection_max_size(
  aw_preface_t* aw_preface
);

/* <Function> aw_preface_set_face_detection_size
   <Description> Set the face detection search size relative to the image
   width.
   <Parameters>
     aw_preface - Library object pointer.
     minimum - Value on (0, 1.0] indicating the minimum size of face to search
               for.
     maximum - Value on (0, 1.0] indicating the maximum size of face to search
               for.
   <Return Value>
     Error code.
    */
AW_PREFACE_DECLARE(aw_int32_t) aw_preface_set_face_detection_size(
  aw_preface_t* aw_preface,
  aw_double_t minimum,
  aw_double_t maximum
);

/* <Function> aw_preface_get_face_detection_sensitivity
   <Description> Get the current face detection sensitivity.
   <Parameters>
     aw_preface - Library object pointer.
   <Return Value>
     Value on (0, 1.0] indicating the search sensitivity.
    */
AW_PREFACE_DECLARE(aw_double_t) aw_preface_get_face_detection_sensitivity(
  aw_preface_t* aw_preface
);

/* <Function> aw_preface_set_face_detection_sensitivity
   <Description> Set the face detection sensitivity. Higher values will allow
   detection of more faces but with higher false detections.
   <Parameters>
     aw_preface - Library object pointer.
     sensitivity - Value on (0, 1.0] indicating the search sensitivity.
   <Return Value>
     Error code.
    */
AW_PREFACE_DECLARE(aw_int32_t) aw_preface_set_face_detection_sensitivity(
  aw_preface_t* aw_preface,
  aw_double_t sensitivity
);

/* <Function> aw_preface_get_face_detection_granularity
   <Description> Get the current face detection granularity.
   <Parameters>
     aw_preface - Library object pointer.
   <Return Value>
     Value on (0, 1.0] indicating the search granularity.
    */
AW_PREFACE_DECLARE(aw_double_t) aw_preface_get_face_detection_granularity(
  aw_preface_t* aw_preface
);

/* <Function> aw_preface_set_face_detection_granularity
   <Description> Indicates how thoroughly to check different face scales.
   Lower values may cause missed detections but will result in
   faster processing.
   <Parameters>
     aw_preface - Library object pointer.
     granularity - Face scale granularity.
   <Return Value>
     Error code.
    */
AW_PREFACE_DECLARE(aw_int32_t) aw_preface_set_face_detection_granularity(
  aw_preface_t* aw_preface,
  aw_double_t granularity
);

/* <Function> aw_preface_get_face_detection_mode
   <Description> Get the current face detection mode.
   <Parameters>
     aw_preface - Library object pointer.
   <Return Value>
     Face detection mode.
    */
AW_PREFACE_DECLARE(aw_preface_face_detection_mode_t) aw_preface_get_face_detection_mode(
  aw_preface_t* aw_preface
);

/* <Function> aw_preface_set_face_detection_mode
   <Description> Set face detection mode for finding faces.
   <Parameters>
     aw_preface - Library object pointer.
     face_detection_mode - Face detection mode.
   <Return Value>
     Error code.
    */
AW_PREFACE_DECLARE(aw_int32_t) aw_preface_set_face_detection_mode(
  aw_preface_t* aw_preface,
  aw_preface_face_detection_mode_t face_detection_mode
);

/* <Function> aw_preface_get_face_count
   <Description> Retrieve the number of faces in the current image.
   <Parameters>
     aw_preface - Library object pointer.
   <Return Value>
     Number of faces found on success (including 0), or -1 on error.
    */
AW_PREFACE_DECLARE(aw_int32_t) aw_preface_get_face_count(
  aw_preface_t* aw_preface
);

/* <Function> aw_preface_add_undetected_face
   <Description> Detect a face with the given eye locations.
   <Parameters>
     aw_preface - Library object pointer.
     left_eye_x - X coordinate of Left eye coordinate.
     left_eye_y - Y coordinate of Left eye coordinate.
     right_eye_x - X coordinate of Right eye coordinate.
     right_eye_y - Y coordinate of Right eye coordinate.
   <Return Value>
     Face index (including 0), or -1 on error.
    */
AW_PREFACE_DECLARE(aw_int32_t) aw_preface_add_undetected_face(
  aw_preface_t* aw_preface,
  aw_float_t left_eye_x,
  aw_float_t left_eye_y,
  aw_float_t right_eye_x,
  aw_float_t right_eye_y
);


/* <Function> aw_preface_face_get_feature_location
   <Description> Retrieve the floating point x and y coordinates of the
   specified feature of the face.
   <Parameters>
     aw_preface - Library object pointer.
     face_handle - Handle of the face object to query.
     feature - The feature to locate.
     feature_point_x - X coordinate of the feature location.
     feature_point_y - Y coordinate of the feature location.
   <Return Value>
     Error code if an error was encountered.
    */
AW_PREFACE_DECLARE(aw_int32_t) aw_preface_face_get_feature_location(
  aw_preface_t* aw_preface,
  aw_preface_face_t* face_handle,
  aw_preface_face_feature_t feature,
  aw_float_t* feature_point_x,
  aw_float_t* feature_point_y
);

/* <Function> aw_preface_face_get_image
   <Description> Retrieves the image for a face in the desired image format.
   <Parameters>
     aw_preface - Library object pointer.
     face_handle - Handle of the face object to query.
     image_format - image format for the retrieved image
     mirror - whether image is to be mirrored or not
     image_size - Size of the formatted image for the face.
   <Return Value>
     the formatted image for the face.
    */
AW_PREFACE_DECLARE(aw_uint8_t*) aw_preface_face_get_image(
  aw_preface_t* aw_preface,
  aw_preface_face_t* face_handle,
  aw_preface_image_format_t image_format,
  aw_bool_t mirror,
  size_t* image_size
);

/* <Function> aw_preface_face_construct_image
   <Description> Modifies the image to be compliant with the specified
   profile.
   <Parameters>
     aw_preface - Library object pointer.
     face_handle - Handle of the original face object.
     profile_handle - Handle of the profile object containing desired
                      compliance limits.
   <Return Value>
     Handle of the new face object.
    */
AW_PREFACE_DECLARE(aw_preface_face_t*) aw_preface_face_construct_image(
  aw_preface_t* aw_preface,
  aw_preface_face_t* face_handle,
  aw_preface_profile_t* profile_handle
);

/* <Function> aw_preface_face_auto_enhance
   <Description> Enhances the contrast and brightness of the image to be
   compliant with the specified profile, or enhance the image to
   specified level if profile not provided.
   <Parameters>
     aw_preface - Library object pointer.
     face_handle - Handle of the face object to enhance.
     profile_handle - Handle of the profile object containing desired
                      compliance limits.
     max_level_of_enhancement - Max level of enhancement.
   <Return Value>
     Error code.
    */
AW_PREFACE_DECLARE(aw_int32_t) aw_preface_face_auto_enhance(
  aw_preface_t* aw_preface,
  aw_preface_face_t* face_handle,
  aw_preface_profile_t* profile_handle,
  aw_int32_t max_level_of_enhancement
);

/* <Function> aw_preface_face_get_metric_score
   <Description> Get the value calculated for an image metric.
   <Parameters>
     aw_preface - Library object pointer.
     face_handle - Handle of the face object to query.
     metric - The enumeration of the image metric to check.
   <Return Value>
     The value of the specified image metric.  -1.0 means not applicable, -2.0
     means not implemented yet.
    */
AW_PREFACE_DECLARE(aw_double_t) aw_preface_face_get_metric_score(
  aw_preface_t* aw_preface,
  aw_preface_face_t* face_handle,
  aw_preface_metric_t metric
);

/* <Function> aw_preface_face_encode_data_record
   <Description> Get a buffer containing specified data record for the face.
   <Parameters>
     aw_preface - Library object pointer.
     face_handle - Handle to face object.
     format - Standard format to write out.
     image_format - JPEG, J2K, or PNG
     json_data - JSON string with partial record data.
     options - Additional options.
     binary_data_record_size - Size of Binary representation of the specified
                               data record format.
   <Return Value>
     Binary representation of the specified data record format.
    */
AW_PREFACE_DECLARE(aw_uint8_t*) aw_preface_face_encode_data_record(
  aw_preface_t* aw_preface,
  aw_preface_face_t* face_handle,
  aw_preface_data_record_format_t format,
  aw_preface_image_format_t image_format,
  const aw_char_t* json_data,
  const aw_char_t* options,
  size_t* binary_data_record_size
);

/* <Function> aw_preface_face_is_compliant
   <Description> Check if the face is compliant with regards to a profile.
   <Parameters>
     aw_preface - Library object pointer.
     face_handle - Handle to face object.
     profile_handle - Handle to profile to check compliance against.
   <Return Value>
     Boolean stating if the face is compliant with the profile or not.
    */
AW_PREFACE_DECLARE(aw_bool_t) aw_preface_face_is_compliant(
  aw_preface_t* aw_preface,
  aw_preface_face_t* face_handle,
  aw_preface_profile_t* profile_handle
);

/* <Function> aw_preface_face_get_metric_status
   <Description> Get the status of a specific metric with regards to a
   profile.
   <Parameters>
     aw_preface - Library object pointer.
     face_handle - Handle to face object.
     profile_handle - Handle to profile to check status of specified metric
     metric - Metric.
   <Return Value>
     Status of face's metric score compared to the profile's metric range.
    */
AW_PREFACE_DECLARE(aw_preface_metric_status_t) aw_preface_face_get_metric_status(
  aw_preface_t* aw_preface,
  aw_preface_face_t* face_handle,
  aw_preface_profile_t* profile_handle,
  aw_preface_metric_t metric
);

/* <Function> aw_preface_face_get_compliance_score
   <Description> Get the compliance score for a face with regards to a
   profile.  Return values range from 0 to 100, with 0 being
   non-compliant and 100 being a perfect match when compared to
   the preferred values for each metric in the profile.  A
   non-zero score means that the image is compliant.
   <Parameters>
     aw_preface - Library object pointer.
     face_handle - Handle to face object.
     profile_handle - Handle to profile to calculate the compliance score.
   <Return Value>
     Score for the face's compliance with regards to the profile.  Zero
     indicates that the face is non-compliant.  A non-zero score indicates how
     strongly compliant the face is.
    */
AW_PREFACE_DECLARE(aw_double_t) aw_preface_face_get_compliance_score(
  aw_preface_t* aw_preface,
  aw_preface_face_t* face_handle,
  aw_preface_profile_t* profile_handle
);

/* <Function> aw_preface_face_destroy
   <Description> Releases the specified face object.
   <Parameters>
     aw_preface - Library object pointer.
     face_handle - The handle of the face to release.
   <Return Value>
     None
    */
AW_PREFACE_DECLARE(void) aw_preface_face_destroy(
  aw_preface_t* aw_preface,
  aw_preface_face_t* face_handle
);

/* <Function> aw_preface_get_face
   <Description> Copies data from the indexed face in a Preface instance to a
   Face object.
   <Parameters>
     aw_preface - Library object pointer.
     face_index - The index of the face to query.
   <Return Value>
     Face handle representing the Face instance that will receive the data.
    */
AW_PREFACE_DECLARE(aw_preface_face_t*) aw_preface_get_face(
  aw_preface_t* aw_preface,
  aw_int32_t face_index
);

/* Profile Management */

/* <Function> aw_preface_read_profile
   <Description> Use this function to read an existing profile present in a
   buffer or stream.
   <Parameters>
     aw_preface - Library object pointer.
     buffer - buffer containing the profile file
     buffer_size - Size of buffer containing the profile file
     relaxHardConstraints - true if hard constraints should be relaxed, false
                            otherwise
   <Return Value>
     Handle to new Profile object.
    */
AW_PREFACE_DECLARE(aw_preface_profile_t*) aw_preface_read_profile(
  aw_preface_t* aw_preface,
  aw_uint8_t* buffer,
  size_t buffer_size,
  aw_int32_t relaxHardConstraints
);

/* <Function> aw_preface_get_profile_errors
   <Description> Returns an array of error codes describing any errors that
   occurred when loading or validating a profile.
   <Parameters>
     aw_preface - Library object pointer.
     buffer - buffer containing the profile file
     buffer_size - Size of buffer containing the profile file
     error_list_size - Size of Array of errors that occurred validating the
                       profile.
   <Return Value>
     Array of errors that occurred validating the profile.
    */
AW_PREFACE_DECLARE(aw_preface_profile_error_t*) aw_preface_get_profile_errors(
  aw_preface_t* aw_preface,
  aw_uint8_t* buffer,
  size_t buffer_size,
  size_t* error_list_size
);


/* <Function> aw_preface_profile_get_value
   <Description> Use this function to get a value defined in a profile.
   <Parameters>
     aw_preface - Library object pointer.
     profile_handle - Handle to a Profile object to query.
     metric - image metric
     metric_constraint - metric constraint type
   <Return Value>
     value from profile
    */
AW_PREFACE_DECLARE(aw_double_t) aw_preface_profile_get_value(
  aw_preface_t* aw_preface,
  aw_preface_profile_t* profile_handle,
  aw_preface_metric_t metric,
  aw_preface_metric_constraint_t metric_constraint
);

/* <Function> aw_preface_profile_set_value
   <Description> Use this function to set a single value within the profile.
   <Parameters>
     aw_preface - Library object pointer.
     profile_handle - Handle to a Profile object to modify.
     metric - image metric
     metric_constraint - metric constraint type
     value - New Value for the Metric Constraint.  Use the Unconstrained
             constant to remove a Metric Constraint.
     error_list_size - Size of Array of errors that occurred validating the
                       profile.
   <Return Value>
     Array of errors that occurred validating the profile.
    */
AW_PREFACE_DECLARE(aw_preface_profile_error_t*) aw_preface_profile_set_value(
  aw_preface_t* aw_preface,
  aw_preface_profile_t* profile_handle,
  aw_preface_metric_t metric,
  aw_preface_metric_constraint_t metric_constraint,
  aw_double_t value,
  size_t* error_list_size
);

/* <Function> aw_preface_profile_get_image_format
   <Description> Use this function to get image format in the profile.
   <Parameters>
     aw_preface - Library object pointer.
     profile_handle - Handle to a Profile object to query.
   <Return Value>
     image format from profile
    */
AW_PREFACE_DECLARE(aw_preface_image_format_t) aw_preface_profile_get_image_format(
  aw_preface_t* aw_preface,
  aw_preface_profile_t* profile_handle
);

/* <Function> aw_preface_profile_set_scale
   <Description> Use this function to set a scale value for the profile.
   <Parameters>
     aw_preface - Library object pointer.
     profile_handle - Handle to a Profile object to modify.
     value - value to set for the profile object, equals to or greater than
             1.0.
   <Return Value>
     Error status.
    */
AW_PREFACE_DECLARE(aw_int32_t) aw_preface_profile_set_scale(
  aw_preface_t* aw_preface,
  aw_preface_profile_t* profile_handle,
  aw_double_t value
);

/* <Function> aw_preface_profile_write
   <Description> Use this function to save the profile pointed to by the
   pointer, to a buffer.
   <Parameters>
     aw_preface - Library object pointer.
     profile_handle - Handle to a Profile object to retrieve.
     profileBuffer_size - Size of profile in a byte array. NULL if there was
                          an error.
   <Return Value>
     profile in a byte array. NULL if there was an error.
    */
AW_PREFACE_DECLARE(aw_uint8_t*) aw_preface_profile_write(
  aw_preface_t* aw_preface,
  aw_preface_profile_t* profile_handle,
  size_t* profileBuffer_size
);

/* <Function> aw_preface_profile_get_metrics_list
   <Description> Get the list of calculated metrics for the profile.
   <Parameters>
     aw_preface - Library object pointer.
     profile_handle - Handle to a Profile object to validate.
     compliance_list_size - Size of List of metrics calculated by the profile.
   <Return Value>
     List of metrics calculated by the profile.
    */
AW_PREFACE_DECLARE(aw_preface_metric_t*) aw_preface_profile_get_metrics_list(
  aw_preface_t* aw_preface,
  aw_preface_profile_t* profile_handle,
  size_t* compliance_list_size
);

/* <Function> aw_preface_profile_get_roi
   <Description> Get the Region of Interest for where to position a face based
   on the Profile and an image size.
   <Parameters>
     aw_preface - Library object pointer.
     profile_handle - Handle to a Profile object.
     width - Width of the image to be evaluated with this Profile.
     height - Height of the image to be evaluated with this Profile.
     roi_x - X coordinate of Region of interest where the head should be
             placed in order to be compliant with the Profile.
     roi_y - Y coordinate of Region of interest where the head should be
             placed in order to be compliant with the Profile.
     roi_width - Width of Region of interest where the head should be placed
                 in order to be compliant with the Profile.
     roi_height - Height of Region of interest where the head should be placed
                  in order to be compliant with the Profile.
   <Return Value>
     Error code if an error was encountered.
    */
AW_PREFACE_DECLARE(aw_int32_t) aw_preface_profile_get_roi(
  aw_preface_t* aw_preface,
  aw_preface_profile_t* profile_handle,
  aw_int32_t width,
  aw_int32_t height,
  aw_int32_t* roi_x,
  aw_int32_t* roi_y,
  aw_int32_t* roi_width,
  aw_int32_t* roi_height
);

/* <Function> aw_preface_profile_destroy
   <Description> Releases the specified profile object.
   <Parameters>
     aw_preface - Library object pointer.
     profile_handle - The handle of the profile to release.
   <Return Value>
     None
    */
AW_PREFACE_DECLARE(void) aw_preface_profile_destroy(
  aw_preface_t* aw_preface,
  aw_preface_profile_t* profile_handle
);

/* Data Record Functions */

/* <Function> aw_preface_encode_data_record
   <Description> Encode the specified JSON buffer as a binary buffer of the
   specified standard.
   <Parameters>
     aw_preface - Library object pointer.
     format - Standard format to write out.
     json_data - JSON string with record data.
     options - Additional options.
     binary_data_record_size - Size of Binary representation of the specified
                               data record format.
   <Return Value>
     Binary representation of the specified data record format.
    */
AW_PREFACE_DECLARE(aw_uint8_t*) aw_preface_encode_data_record(
  aw_preface_t* aw_preface,
  aw_preface_data_record_format_t format,
  const aw_char_t* json_data,
  const aw_char_t* options,
  size_t* binary_data_record_size
);

/* <Function> aw_preface_decode_data_record
   <Description> Decode the binary buffer of the specified standard to a JSON
   string.
   <Parameters>
     aw_preface - Library object pointer.
     format - Standard format to write out.
     binary_buffer - Binary buffer of the specified format.
     binary_buffer_size - Size of Binary buffer of the specified format.
     options - Additional options.
   <Return Value>
     JSON string of the record data.
    */
AW_PREFACE_DECLARE(const aw_char_t*) aw_preface_decode_data_record(
  aw_preface_t* aw_preface,
  aw_preface_data_record_format_t format,
  aw_uint8_t* binary_buffer,
  size_t binary_buffer_size,
  const aw_char_t* options
);

/* Version Functions */

/* <Function> aw_preface_get_version
   <Description> Returns integer value indicating the current version of the
   component.
   <Return Value>
     An integer indicating the library version number.
    */
AW_PREFACE_DECLARE(aw_int32_t) aw_preface_get_version();

/* <Function> aw_preface_get_version_string
   <Description> Returns a text string indicating the current version of the
   component.
   <Return Value>
     A string indicating the library version number.
    */
AW_PREFACE_DECLARE(const aw_char_t*) aw_preface_get_version_string();

/* Error Handling */

/* <Function> aw_preface_get_last_error
   <Description> Returns the status code of the last function called.
   <Parameters>
     aw_preface - Library object pointer.
   <Return Value>
     Status code of the last function called.
    */
AW_PREFACE_DECLARE(aw_int32_t) aw_preface_get_last_error(
  aw_preface_t* aw_preface
);

/* <Function> aw_preface_get_last_error_details
   <Description> Returns the status code of the last function called.
   <Parameters>
     aw_preface - Library object pointer.
   <Return Value>
     Details of the last error that occurred.
    */
AW_PREFACE_DECLARE(const aw_char_t*) aw_preface_get_last_error_details(
  aw_preface_t* aw_preface
);



#ifdef __cplusplus
}
#endif

#endif /* _AW_PREFACE_H_ */

